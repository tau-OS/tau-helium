// Custom added styles

$linked_border: if($color-scheme == 'light', darken($borders_color, 6.7%), lighten($borders_color, 5%));
$linked_border_checked: if($color-scheme == 'light', darken($linked_border, 17.7%), lighten($linked_border, 14.7%));
$backdrop_linked_border: if($color-scheme == 'light', $backdrop_borders_color, darken($backdrop_borders_color, 5%));

%colored_buttons {
  @if $color-scheme == 'light' { @include button(normal, lighten($headerbar_color, 1%), $fg_color); }
  @else { @include button(normal, darken($headerbar_color, 0.3%), $fg_color); }
  &:backdrop {
    @include button(backdrop, $bg_color, $fg_color);
  }
  &:hover {
    @if $color-scheme == 'light' { @include button(hover, lighten($headerbar_color, 0.3%), $fg_color); }
    @else { @include button(hover, darken($headerbar_color, 0.7%), $fg_color); }
    &:backdrop {
      @if $color-scheme == 'light' { @include button(backdrop, darken($bg_color, 2.7%), $fg_color); }
      @else { @include button(backdrop, lighten($bg_color, 2.7%), $fg_color); }
    }
  }
  &:active, &:checked {
    @if $color-scheme == 'light' { @include button(active, lighten($headerbar_color, 1.7%), $fg_color); }
    @else { @include button(active, darken($headerbar_color, 1%), $fg_color); }
    &:backdrop {
      @include button(normal, $bg_color, $fg_color);
    }
  }
  &:disabled {
    @include button(insensitive, $headerbar_color, $insensitive_fg_color);
  }
  &:backdrop:disabled {
    @include button(backdrop-insensitive, $bg_color, $backdrop_insensitive_color);
  }

  &.default:not(:backdrop):not(.suggested-action):not(.destructive-action) {
    @include button(normal, $headerbar_color, $fg_color);
  }

  &.flat:not(:hover):not(:active) { @include button(undecorated); }

  &.suggested-action, &.text-button.suggested-action { @extend %suggested_buttons; }
  &.destructive-action, &.text-button.destructive-action { @extend %destructive_buttons; }
}

%headerbar_buttons {
  // The normal state is set where it's needed. Usually undecorated.
  &:hover {
    @if $color-scheme == 'light' { @include button(hover, lighten($headerbar_color, 6.3%), $fg_color); }
    @else { @include button(hover, darken($headerbar_color, 7.7%), $fg_color); }
  }

  &:backdrop:hover {
    @if $color-scheme == 'light' { @include button(backdrop, lighten($bg_color, 1.3%), $fg_color); }
    @else { @include button(backdrop, darken($bg_color, 1.3%), $fg_color); }
  }

  &:active, &:checked {
    @if $color-scheme == 'light' { @include button(normal, lighten($headerbar_color, 1%), $fg_color); }
    @else { @include button(normal, darken($headerbar_color, 0.3%), $fg_color); }
    &:backdrop {
      @include button(normal, $bg_color, $fg_color); //FIXME
    }
  }

  &:active:hover, &:checked:hover {
    @if $color-scheme == 'light' { @include button(normal, darken($headerbar_color, 1.3%), $fg_color); }
    @else { @include button(normal, lighten($headerbar_color, 2.3%), $fg_color); }
    &:backdrop {
      @include button(normal, $bg_color, $fg_color); //FIXME
    }
  }

  &.default:not(:backdrop):not(.suggested-action):not(.destructive-action) {
    @include button(normal, $headerbar_color, $fg_color);
  }

  &.flat:not(:hover):not(:active) { @include button(undecorated); }

  &.suggested-action, &.text-button.suggested-action { @extend %suggested_buttons; }
  &.destructive-action, &.text-button.destructive-action { @extend %destructive_buttons; }
}

%suggested_buttons {
  @include button(normal, $suggested_bg_color, white);
  &:hover { @include button(hover, $suggested_bg_color, white); }
  &:active, &:checked { @include button(active, transparentize($suggested_bg_color, 0.5), white); }
  &:backdrop, &:backdrop:hover { @include button(backdrop, transparentize($suggested_bg_color, 0.5), white); }
}

%destructive_buttons {
  @include button(normal, $destructive_color, white);
  &:hover { @include button(normal, $destructive_color, white); }
  &:active, &:checked { @include button(active, transparentize($destructive_color, 0.5), white); }
  &:backdrop, &:backdrop:hover { @include button(backdrop, transparentize($destructive_color, 0.5), white); }
}

// headerbar stuff
headerbar, .titlebar {
  button:not(.titlebutton) {
    &, &:backdrop { @include button(undecorated); }
    @extend %headerbar_buttons;
  }

  // Text buttons
  button.text-button:not(.suggested-action):not(.destructive-action):not(:disabled) {
    @extend %colored_buttons;
  }

  // Linked buttons
  // borders
  //.linked button.image-button:not(:only-child),
  .linked.raised button:not(:only-child),
  .linked button:not(:only-child),
  & > .stack-switcher.linked > button:not(:only-child) {
    @extend %linked;
    &, &:hover, &:not(:backdrop), &:not(:disabled) {
      &:not(:first-child) { border-left-color: $linked_border; }
      &:not(:last-child) { border-right-color: $linked_border; }
    }
    &:active, &:checked {
      &:not(:first-child) { border-left-color: $linked_border_checked; }
      &:not(:last-child) { border-right-color: $linked_border_checked; }
    }
    &:backdrop {
      &:not(:first-child) { border-left-color: $backdrop_linked_border; }
      &:not(:last-child) { border-right-color: $backdrop_linked_border; }
    }
    &:first-child { border-left-color: transparent; }
    &:last-child { border-right-color: transparent; }

    // Trick to get a linked right border on checked buttons, and no left border on the next button
    &:first-child:not(:backdrop),
    &:not(:last-child):not(:backdrop) {
      &:checked, &:active {
        box-shadow: inset -1px 0 $linked_border_checked;
        + button { border-left-color: transparent; }
      }
    }
  }

  // Linked color fills
  //.linked button.image-button:not(:only-child),
  .linked.raised button,
  .linked button:not(:only-child),
  & > .stack-switcher.linked > button { @extend %colored_buttons; }

  // hdy viewswitcher buttons (weather, system monitor, etc.)
  viewswitcher button.radio:checked {
    @extend %headerbar_buttons;
  }

  // Selection mode
  &.selection-mode {
    button,
    button.text-button:not(.suggested-action):not(.destructive-action):not(:disabled) { @extend %suggested_buttons; }
  }

  // Entries
  entry {
    min-height: 32px; // Evens out the height for the top and bottom borders which adds 2px
    @include button(normal, $headerbar_color, $text_color);
    &:backdrop { @include button(backdrop, $bg_color, $backdrop_text_color); }
    &:disabled { @include button(insensitive, $headerbar_color, $insensitive_fg_color); }
    &:disabled:backdrop { @include button(insensitive, $bg_color, $backdrop_insensitive_color); }

    image { // icons inside the entry
      &.left { margin-right: 6px; }
      &.right { margin-left: 6px; }

      // entry icons colors
      color: mix($fg_color, $base_color, 80%);
      &:hover { color: $fg_color; }
      &:active { color: $selected_bg_color; }
      &:backdrop { color: mix($fg_color, $backdrop_base_color, 80%); }
    }

    selection { @extend %selected_items; }

    // entry error and warning style
    @each $e_type, $e_color in (error, $error_color),
                               (warning, $warning_color) {
      &.#{$e_type} {
        color: $e_color;
        border-color: entry_focus_border($e_color);

        &:focus { @include entry(focus, $e_color); }

        selection { background-color: $e_color; }
      }
    }

    &.flat {
      &:focus, &:backdrop, &:disabled, &:backdrop:disabled, & {
        min-height: 0;
        padding: 2px;
        background-color: transparent;
        border-color: transparent;
        border-radius: 0;
      }
    }

    &:drop(active) {
      &:focus, & {
        border-color: $drop_target_color;
        box-shadow: inset 0 0 0 1px $drop_target_color;
      }
    }

    progress {
      margin: 2px -6px;
      background-color: transparent;
      background-image: none;
      border-radius: 0;
      border-width: 0 0 2px;
      border-color: $progress_bg_color;
      border-style: solid;
      box-shadow: none;

      &:backdrop { background-color: transparent; }
    }
  }

  .linked entry:not(:first-child) {
    border-left-color: $linked_border;
    &:backdrop { border-left-color: $backdrop_linked_border; }
  }

  // disabled switches
  switch:disabled {
    background-color: darken($backdrop_dark_fill, 4%);
    &:backdrop { background-color: $backdrop_dark_fill; }
  }

  // better animation when switching from backdrop
  &:not(:backdrop) { transition: 200ms ease-in; }

  // Balance out the titlebutton margin
  .right {
    margin-left: -4px;
    separator { min-width: 0; }
  }
  .left {
    margin-right: -4px;
    separator { min-width: 0; }
  }
}

// Different button color on brighter elements like lists and popovers
.content list,
list.content,
list.view.frame {
  button, > row:not(:selected):hover button {
    @include button(normal, $card_bg_color, $card_fg_color);
    &.flat:not(:hover):not(:active) { @include button(undecorated); }
    &:hover { @include button(hover, $view_hover_color, $card_fg_color); }
    &:active, &:checked { @include button(active, $view_active_color, $card_fg_color); }
    &:disabled { @include button(insensitive, $card_bg_color, $insensitive_fg_color); }
    &:backdrop { @include button(backdrop, $card_bg_color, $fg_color); }
    &:backdrop:disabled { @include button(backdrop-insensitive, $card_bg_color, $fg_color); }

    &.suggested-action { @extend %suggested_buttons; }
    &.destructive-action { @extend %destructive_buttons; }
  }
  entry {
    @include button(normal, $card_bg_color, $text_color);
    &:disabled { @include button(insensitive, $card_bg_color, $insensitive_fg_color); }
    &:backdrop { @include button(backdrop, $card_bg_color, $backdrop_text_color); }
    &:backdrop:disabled { @include button(backdrop-insensitive, $card_bg_color, $fg_color); }
  }
}

popover.background {
  button {
    @include button(normal, $popover_bg_color, $fg_color);
    &.flat:not(:hover):not(:active) { @include button(undecorated); }
    &:hover { @include button(hover, $view_hover_color, $fg_color); }
    &:active, &:checked { @include button(active, $view_active_color, $fg_color); }
    &:disabled { @include button(insensitive, $popover_bg_color, $insensitive_fg_color); }
    &:backdrop { @include button(backdrop, $popover_bg_color, $fg_color); }
    &:backdrop:disabled { @include button(backdrop-insensitive, $popover_bg_color, $fg_color); }

    &.suggested-action { @extend %suggested_buttons; }
    &.destructive-action { @extend %destructive_buttons; }
  }
  entry {
    @include button(normal, $popover_bg_color, $text_color);
    &:disabled { @include button(insensitive, $popover_bg_color, $insensitive_fg_color); }
    &:backdrop { @include button(backdrop, $popover_bg_color, $backdrop_text_color); }
    &:backdrop:disabled { @include button(backdrop-insensitive, $popover_bg_color, $fg_color); }
  }
}

// Even out toggle button padding to make them more square
button.toggle:not(.image-button) {
  padding-left: 8px;
  padding-right: 8px;
}

// Font fixes when button text is bold
.flat.popup:not(.title) {
  font-weight: normal;
}

// Smaller text in statusbars
statusbar {
  font-size: small;
}

// scrolled window list rows
scrolledwindow list {
  &:not(.content) {
    padding: 6px 0;
  }
  row {
    margin: 0 6px;
    border-radius: $button_radius;
  }
  separator.horizontal {
    margin: 6px;
  }
}

// Fix wrong border-radius on hdy spinbutton entries
list.content .horizontal spinbutton entry {
  border-top-left-radius: $button_radius;
  border-bottom-left-radius: $button_radius;
}

// Non "content" lists
list.view.frame {
  border-radius: $card_radius;
  &, &:backdrop { background-color: $card_bg_color; }
}

// Legacy application titlebuttons
.ssd .titlebar {
  border-width: 0;
  padding: 0px 4px;
  min-height: 36px;
  border-bottom: 1px solid $borders_color;
  &:backdrop { border-color: $backdrop_borders_color; }

  &.default-decoration button.titlebutton {
    background-color: $titlebutton_normal;
    min-height: 24px;
    min-width: 24px;
    margin: 0 4px 0 4px;
    padding: 0;
    &:hover { background-color: $titlebutton_normal_hover; }
    &:hover:active, &:active { background-color: $titlebutton_normal_active; }
    &:backdrop { background: $titlebutton_backdrop; }
    &:backdrop:hover { background: $titlebutton_backdrop_hover; }
  }
}

// Tree views
treeview.view:not(:backdrop):not(:selected):hover {
  background-color: $view_hover_color;
}

// Preferences window
// In nautilus preferences there is no padding below the last list
.preferences scrolledwindow > .frame > clamp {
  &.large, &.medium, &.small { padding-bottom: 30px; }
}

// Linked osd buttons, like in totem
.osd .linked > button { border-color: transparent; }

// Toolbars
.primary-toolbar, .toolbar {
  background-color: $bg_color;
  &:backdrop { background-color: $backdrop_bg_color; }
}

// Popover menuitems
popover.background {
  modelbutton.flat {
    padding-left: 16px;
    padding-right: 16px;
  }
}

// libhandy styles, mostly borrowed from Yaru https://github.com/ubuntu/yaru

@function hdyalpha($c, $a) {
  @return unquote("alpha(#{$c}, #{$a})");
}

@function hdymix($c1, $c2, $r) {
  @return unquote("mix(#{$c1}, #{$c2}, #{$r})");
}

$leaflet_dimming: rgba(0, 0, 0, if($color-scheme == 'light', 0.12, 0.24));
$leaflet_border: rgba(0, 0, 0, if($color-scheme == 'light', 0.05, 0.2));
$leaflet_outline: rgba(255, 255, 255, if($color-scheme == 'light', 0.2, 0.05));

@mixin background-shadow($direction) {
  background-image:
    linear-gradient($direction,
                    rgba(0, 0, 0, if($color-scheme == 'light', 0.05, 0.1)),
                    rgba(0, 0, 0, if($color-scheme == 'light', 0.01, 0.02)) 40px,
                    rgba(0, 0, 0, 0) 56px),
    linear-gradient($direction,
                    rgba(0, 0, 0, if($color-scheme == 'light', 0.03, 0.06)),
                    rgba(0, 0, 0, if($color-scheme == 'light', 0.01, 0.02)) 7px,
                    rgba(0, 0, 0, 0) 24px);
}

// Makes the corners of the given border rounded.
// $border must be top, bottom, left, or right.
@mixin rounded-border($border) {
  // The floors (top, bottom) and walls (left, right) of the corners matching
  // $border. This is needed to easily form floor-wall pairs regardless of
  // whether $border is a floor or a wall.
  $corners: (
    'top': (('top'), ('left', 'right')),
    'bottom': (('bottom'), ('left', 'right')),
    'left': (('top', 'bottom'), ('left')),
    'right': (('top', 'bottom'), ('right')),
  );

  @if not map-get($corners, $border) {
    @error "Unknown border type: #{$border}";
  }

  // Loop through the floors and walls of the corners of $border.
  @each $floor in nth(map-get($corners, $border), 1) {
    @each $wall in nth(map-get($corners, $border), 2) {
      border-#{$floor}-#{$wall}-radius: 8px;
      -gtk-outline-#{$floor}-#{$wall}-radius: 7px;
    }
  }
}

@mixin margin-start($margin) {
  &:dir(ltr) {
    margin-left: $margin;
  }

  &:dir(rtl) {
    margin-right: $margin;
  }
}

// Roundness on unified window decoration
// https://gitlab.gnome.org/GNOME/libhandy/-/issues/339
window.csd.unified:not(.solid-csd):not(.fullscreen) {
  &:not(.tiled):not(.tiled-top):not(.tiled-bottom):not(.tiled-left):not(.tiled-right):not(.maximized) {
    &,
    > decoration,
    > decoration-overlay {
      border-radius: $window_radius;
    }
  }
}

// Better scrollbars when the bottom corner is rounded
window.csd.unified {
  $_slider_width: 8px;
  $_slider_min_length: 40px;
  $_scrollbar_transition: all 200ms linear;
  scrollbar {
    background-color: $base_color;
    color: $fg_color;

    trough {
      margin: 7px;
      transition: $_scrollbar_transition;
      border-radius: 10px;
      background-color: $trough_color;

      > slider {
        min-width: $_slider_width;
        min-height: $_slider_width;
        margin: -6px;
        border: 6px solid transparent;
        border-radius: 10px;
        background-clip: padding-box;
        transition: $_scrollbar_transition;

        background-color: if($color-scheme == 'light', darken($scrollbar_slider_color, 20%), lighten($scrollbar_slider_color, 20%));

        &:hover {
          background-color: if($color-scheme == 'light', darken($scrollbar_slider_hover_color, 20%), lighten($scrollbar_slider_hover_color, 20%));
        }

        &:hover:active {
          background-color: if($color-scheme == 'light', darken($scrollbar_slider_active_color, 20%), lighten($scrollbar_slider_active_color, 20%));
        }

        &:disabled { background-color: transparent; }
      }
    }

    &.horizontal trough {
      margin-top: 6px;
      margin-bottom: 6px;
    }

    &.vertical trough {
      margin-left: 6px;
      margin-right: 6px;
    }

    &.overlay-indicator {
      background: none;
      color: inherit;
      box-shadow: none;
      padding: 0;

      &:not(.hovering) trough { background-color: transparent; }

      &.horizontal {
        trough > slider {
          min-width: $_slider_min_length;
        }

        &.hovering trough > slider {
          min-height: $_slider_width;
        }

        &:not(.hovering) trough {
          margin-top: 3px;
          margin-bottom: 3px;
        }
      }

      &.vertical {
        trough > slider {
          min-height: $_slider_min_length;
        }

        &.hovering trough > slider {
          min-width: $_slider_width;
        }

        &:not(.hovering) trough {
          margin-left: 3px;
          margin-right: 3px;
        }
      }
    }

    &.horizontal trough > slider { min-width: $_slider_min_length; }
    &.vertical trough > slider { min-height: $_slider_min_length; }
  }
}

// HdyComboRow
popover.combo {
  padding: 0px;

  list {
    border-style: none;
    background-color: transparent;
    min-width: 200px;
    margin-top: 6px;
    margin-bottom: 6px;

    > row {
      padding: 0px 8px 0px 8px;
      min-height: 50px;

      &:not(:last-child) {
        border-bottom: 1px solid hdyalpha($borders_color, 0.5)
      }

      &:first-child {
        @include rounded-border(top);
      }

      &:last-child {
        @include rounded-border(bottom);
      }
    }
  }

  @each $border in top, bottom {
    overshoot.#{$border} {
      @include rounded-border($border);
    }
  }

  scrollbar.vertical {
    padding-top: 2px;
    padding-bottom: 2px;

    &:dir(ltr) {
      @include rounded-border(right);
    }

    &:dir(rtl) {
      @include rounded-border(left);
    }
  }
}

// HdyExpanderRow
row.expander {
  padding: 0px;

  image.expander-row-arrow {
    @include margin-start(6px);
  }
}

row.expander {
  // Drop transparent background on expander rows to let nested rows handle it,
  // avoiding double highlights.
  background-color: transparent;

  list.nested > row {
    background-color: hdyalpha($bg_color, 0.5);
    border-color: hdyalpha($borders_color, 0.7);
    border-style: solid;
    border-width: 1px 0px 0px 0px;
  }

  // HdyExpanderRow arrow rotation

  image.expander-row-arrow {
    transition: 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94);
  }

  &:checked image.expander-row-arrow {
    -gtk-icon-transform: rotate(0turn);
  }

  &:not(:checked) image.expander-row-arrow {
    opacity: 0.55;
    text-shadow: none;

    &:dir(ltr) {
      -gtk-icon-transform: rotate(-0.25turn);
    }

    &:dir(rtl) {
      -gtk-icon-transform: rotate(0.25turn);
    }
  }

  &:checked image.expander-row-arrow:not(:disabled) {
    color: $selected_bg_color;
  }

  & image.expander-row-arrow:disabled {
    color: $insensitive_fg_color;
  }
}

// HdyKeypad
keypad {
  .digit {
    font-size: 200%;
    font-weight: bold;
  }
  .letters {
    font-size: 70%;
  }
  .symbol {
    font-size: 160%;
  }
}

// HdyViewSwitcher
viewswitcher {
  &, & button {
    margin: 0;
    padding: 0;
  }

  button {
    border-radius: 0;
    border-top: 0;
    border-bottom: 0;
    box-shadow: none;
    font-size: 1rem;
    border-width: 0;

    &:not(:checked):not(:hover) {
      background: transparent;
    }

    &:not(:only-child):not(:last-child) {
      border-right-width: 0px;
    }

    &:not(only-child):first-child:not(:checked):not(:hover),
    &:not(:checked):not(:hover) + button:not(:checked):not(:hover) {
      border-left-color: transparent;
    }

    &:not(only-child):last-child:not(:checked):not(:hover) {
      border-right-color: transparent;
    }

    &:not(:checked):hover:not(:backdrop) {
      @include button(hover);
      background-image: none;
    }

    &:not(only-child):first-child:not(:checked):hover,
    &:not(:checked):hover + button:not(:checked):not(:hover),
    &:not(:checked):not(:hover) + button:not(:checked):hover {
      border-left-color: shade($borders_color, 1.15);
    }

    &:not(only-child):last-child:not(:checked):hover {
      border-right-color: shade($borders_color, 1.15);
    }

    &:not(:checked):hover:backdrop {
      @include button(backdrop);
      background-image: none;
    }

    // View switcher in a header bar
    headerbar &:not(:checked) {
      &:hover:not(:backdrop) {
        @if $color-scheme == 'light' { @include button(hover, lighten($headerbar_color, 6.3%), $fg_color); }
        @else { @include button(hover, darken($headerbar_color, 6.3%), $fg_color); }
        background-image: none;
      }

      &:not(only-child):first-child:hover,
      &:hover + button:not(:checked):not(:hover),
      &:not(:hover) + button:not(:checked):hover {
        border-left-color: $borders_color;
      }

      &:not(only-child):last-child:hover {
        border-right-color: $borders_color;
      }

      &:hover:backdrop {
        @if $color-scheme == 'light' { @include button(backdrop, lighten($bg_color, 1.3%), $fg_color); }
        @else { @include button(backdrop, darken($bg_color, 1.3%), $fg_color); }
        background-image: none;
      }
    }
    &:checked, &:active {
      @include button(active);
      background-image: none;
      &:backdrop {
        @include button(backdrop-active);
        background-image: none;
      }
    }

    // View switcher button
    > stack > box {
      &.narrow {
        font-size: 0.75rem;
        padding-top: 7px;
        padding-bottom: 5px;

        image,
        label {
          padding-left: 8px;
          padding-right: 8px;
        }
      }

      &.wide {
        padding: 8px 12px;

        image {
          &:dir(ltr) {
            padding-left: 7px;
          }

          &:dir(rtl) {
            padding-right: 7px;
          }
        }

        label {
          &:dir(ltr) {
            padding-right: 7px;
          }

          &:dir(rtl) {
            padding-left: 7px;
          }
        }
      }

      label.active {
        font-weight: bold;
      }
    }

    &.needs-attention {
      &:active > stack > box label,
      &:checked > stack > box label {
        animation: none;
        background-image: none;
      }

      > stack > box label {
        animation: needs_attention 150ms ease-in;
        background-image: -gtk-gradient(radial, center center, 0, center center, 0.5, to($selected_bg_color), to(transparent));
        background-size: 6px 6px, 6px 6px;
        background-repeat: no-repeat;
        background-position: right 0px, right 1px;

        &:backdrop {
          background-size: 6px 6px, 0 0;
        }

        &:dir(rtl) {
          background-position: left 0px, left 1px;
        }
      }
    }
  }
}

// HdyViewSwitcherBar
viewswitcherbar actionbar > revealer > box {
  padding: 0;
}

// HdyViewSwitcherTitle
viewswitchertitle viewswitcher {
  margin-left: 12px;
  margin-right: 12px;
}

// Lists
list.content {
  list {
    background-color: transparent;
    border-radius: $card_radius;
  }

  background-color: $card_bg_color;
  color: $card_fg_color;
  border-radius: $card_radius;

  &:backdrop { color: $fg_color; }

  list.nested > row:not(:active) {
    border: 1px solid $borders_color;
    &:not(:hover):not(:selected),
    &:hover:not(.activatable):not(:selected) {
      background-color: hdymix($bg_color, $card_bg_color, 0.5);
    }

    &:hover.activatable:not(:selected) {
      background-color: hdymix($fg_color, $card_bg_color, 0.954);
    }
  }

  > row {
    margin: 0;
    padding: 2px;
    transition: 200ms $ease-out-quad;
    // Add space around expanded rows
    &.expander:checked:not(:first-child),
    &.expander:checked + row {
      margin-top: 6px;
    }

    &:not(:last-child) {
      border-bottom: 1px solid if($color-scheme == 'light', lighten($borders_color, 7%), lighten($borders_color, 3.7%));
      border-bottom-left-radius: 0;
      border-bottom-right-radius: 0;
    }

    &:not(:first-child):not(:last-child) {
      border-radius: 0;
      -gtk-outline-radius: 0;
    }

    &:first-child {
      border-top-left-radius: $card_radius;
      border-top-right-radius: $card_radius;
      -gtk-outline-radius: $card_radius $card_radius 0 0;
    }

    &:last-child {
      border-top-left-radius: 0;
      border-top-right-radius: 0;
      border-bottom-left-radius: $card_radius;
      border-bottom-right-radius: $card_radius;
      -gtk-outline-radius: 0 0 $card_radius $card_radius;
    }

    &:only-child {
      border-bottom: none;
      border-radius: $card_radius;
      -gtk-outline-radius: $card_radius;
    }

    &:not(.expander):not(:active):hover.activatable:not(:selected),
    &.expander row.header:not(:active):hover.activatable:not(:selected) {
      background-color: hdymix($fg_color, $card_bg_color, 0.954);
    }
  }
}

// List button
button.list-button:not(:active):not(:checked):not(:hover) {
  @include button(normal, $card_bg_color, $fg_color);
}

// HdyStatusPage
statuspage > scrolledwindow > viewport > box > clamp > box > .icon {
  color: transparentize($fg_color, 0.5);

  &:backdrop {
    color: transparentize($fg_color, 0.5);
  }
}

statuspage > scrolledwindow > viewport > box {
  margin: 36px 12px;

  > clamp {
    &:not(:last-child) > box {
      margin-bottom: 36px;
    }

    > box {
      > .icon:not(:last-child) {
        margin-bottom: 36px;
      }

      > .title:not(:last-child) {
        margin-bottom: 12px;
      }
    }
  }
}

// HdyActionRow
row {
  label.subtitle {
    font-size: smaller;
    opacity: 0.55;
    text-shadow: none;
  }

  > box.header {
    margin-left: 12px;
    margin-right: 12px;
    min-height: 50px;

    > box.title {
      margin-top: 8px;
      margin-bottom: 8px;
    }
  }
}

// Hdy tabs
@mixin undershoot-gradient($dir) {
  @if $color-scheme == 'dark' {
    background: linear-gradient(to #{$dir},
                                transparentize(black, .6),
                                transparentize(black, 1) 20px);
  }
  @else {
    background: linear-gradient(to #{$dir},
                                transparentize(black, .93),
                                transparentize(black, 1) 20px);
  }
}

@mixin need-attention-gradient($dir) {
  background: linear-gradient(to #{$dir},
                              transparentize($selected_bg_color, .3),
                              transparentize($selected_bg_color, .5) 1px,
                              transparentize($selected_bg_color, 1) 20px);
}

tabbar {
  .box {
    min-height: 30px;
    background: $shade_color;
    border-bottom: 1px solid $headerbar_border;

    &:backdrop {
      background-color: if($color-scheme == 'light', $backdrop_dark_fill, $shade_color);
      border-color: $backdrop_borders_color;
    }
  }

  scrolledwindow.pinned {
    undershoot {
      border: 0 solid $alt_borders_color;
    }

    &:dir(rtl) undershoot.left {
      border-left-width: 1px;
    }

    &:dir(ltr) undershoot.right {
      border-right-width: 1px;
    }

    &:backdrop undershoot {
      border-color: $backdrop_borders_color;
    }

    tabbox {
      &:dir(ltr) {
        padding-right: 1px;
        box-shadow: inset -1px 0 $alt_borders_color;

        &:backdrop {
          box-shadow: inset -1px 0 $backdrop_borders_color;
        }
      }

      &:dir(rtl) {
        padding-left: 1px;
        box-shadow: inset 1px 0 $alt_borders_color;

        &:backdrop {
          box-shadow: inset 1px 0 $backdrop_borders_color;
        }
      }
    }
  }

  undershoot {
    transition: none;

    &.left {
      @include undershoot-gradient("right");
    }

    &.right {
      @include undershoot-gradient("left");
    }
  }

  .needs-attention-left undershoot.left {
    @include need-attention-gradient("right");
  }

  .needs-attention-right undershoot.right {
    @include need-attention-gradient("left");
  }

  tab {
    border-style: solid;
    border-color: $headerbar_border;
    border-width: 0 1px 0 1px;
    transition: background 150ms ease-in-out;
    background-color: $shade_color;

    &:checked {
      background-color: $active_tab_color;

      &:hover {
        background-color: if($color-scheme == 'light', darken($active_tab_color, 2.3%), lighten($active_tab_color, 2.3%));
      }
    }

    &:hover {
      background-color: if($color-scheme == 'light', darken($shade_color, 2%), lighten($shade_color, 2.3%));
    }

    &:backdrop {
      border-color: $backdrop_borders_color;
      background-color: if($color-scheme == 'light', lighten($shade_color, 5.3%), $shade_color);
      color: mix($fg_color, $backdrop_bg_color, 60%);

      &:checked {
        background-color: if($color-scheme == 'light', $backdrop_base_color, $active_tab_color);
      }
    }
  }

  .start-action,
  .end-action {
    background: $shade_color;
    border-color: $alt_borders_color;
    border-style: solid;
    transition: background 150ms ease-in-out;

    &:backdrop {
      border-color: $backdrop_borders_color;
      background-color: $backdrop_dark_fill;
    }

    button {
      border: none;
      border-radius: 0;
    }
  }

  .start-action:dir(ltr),
  .end-action:dir(rtl) {
    border-right-width: 1px;

    > * {
      margin-right: 1px;
    }
  }

  .start-action:dir(rtl),
  .end-action:dir(ltr) {
    border-left-width: 1px;

    > * {
      margin-left: 1px;
    }
  }
}

.tab-drag-icon {
  tab {
    min-height: 26px;
    background-color: $active_tab_color;

    $_wm_border: if($color-scheme=='light', transparentize(black, 0.77), transparentize($borders_color, 0.1));

    box-shadow: 0 3px 9px 1px transparentize(black, 0.75),
                0 0 0 1px $_wm_border, //doing borders with box-shadow
                inset 0 1px $top_hilight;

    margin: 25px;
  }
}

tabbar,
.tab-drag-icon {
  tab {
    padding: 6px;

    &.needs-attention {
      background-image:
        radial-gradient(ellipse at bottom,
                        transparentize(white, .2),
                        transparentize($selected_bg_color, .8) 15%,
                        transparentize($selected_bg_color, 1) 15%);
    }

    .tab-close-button,
    .tab-indicator {
      padding: 0;
      margin: 0;
      min-width: 24px;
      min-height: 24px;
      border-radius: 99px;

      border: none;
      box-shadow: none;
      -gtk-icon-shadow: none;
      text-shadow: none;
      background: none;
    }

    .tab-close-button,
    .tab-indicator.clickable {
      &:hover {
        background: hdyalpha($fg_color, .15);
      }

      &:active {
        background: hdyalpha(black, .2);
      }
    }
  }
}

// Shadows
flap,
deck,
leaflet {
  > dimming {
    background: $leaflet_dimming;
  }

  > border {
    min-width: 1px;
    min-height: 1px;
    background: $leaflet_border;
  }

  > shadow {
    min-width: 56px;
    min-height: 56px;

    &.left  { @include background-shadow(to right); }
    &.right { @include background-shadow(to left); }
    &.up    { @include background-shadow(to bottom); }
    &.down  { @include background-shadow(to top); }
  }

  > outline {
    min-width: 1px;
    min-height: 1px;
    background: $leaflet_outline;
  }
}

// Avatar
avatar {
  border-radius: 9999px;
  -gtk-outline-radius: 9999px;
  font-weight: bold;

  // The list of colors to generate avatars.
  // Each avatar color is represented by a font color, a gradient start color and a gradient stop color.
  // There are 8 different colors for avtars in the list if you change the number of them you
  // need to update the NUMBER_OF_COLORS in src/hdy-avatar.c.
  // The 2D list has this form: ((font-color, gradient-top-color, gradient-bottom-color)).
  $avatarcolorlist: (
   (#cfe1f5, #83b6ec, #337fdc), // blue
   (#caeaf2, #7ad9f1, #0f9ac8), // cyan
   (#cef8d8, #8de6b1, #29ae74), // green
   (#e6f9d7, #b5e98a, #6ab85b), // lime
   (#f9f4e1, #f8e359, #d29d09), // yellow
   (#ffead1, #ffcb62, #d68400), // gold
   (#ffe5c5, #ffa95a, #ed5b00), // orange
   (#f8d2ce, #f78773, #e62d42), // raspberry
   (#fac7de, #e973ab, #e33b6a), // magenta
   (#e7c2e8, #cb78d4, #9945b5), // purple
   (#d5d2f5, #9e91e8, #7a59ca), // violet
   (#f2eade, #e3cf9c, #b08952), // beige
   (#e5d6ca, #be916d, #785336), // brown
   (#d8d7d3, #c0bfbc, #6e6d71), // gray
  );

  @for $i from 1 through length($avatarcolorlist) {
    &.color#{$i} {
      $avatarcolor: nth($avatarcolorlist, $i);
      background-image: linear-gradient(nth($avatarcolor, 2), nth($avatarcolor, 3));
      color: nth($avatarcolor, 1);
    }
  }

  &.contrasted { color: #fff; }

  &.image { background: none; }
}

// Preferences
window.preferences > deck > deck > box > stack > stack > scrolledwindow > viewport > clamp,
preferencespage > scrolledwindow > viewport > clamp {
  margin: 0 12px;

  > list,
  > box > preferencesgroup { margin-top: 24px; }
}

preferencesgroup > box {
  // Add space between the description and the title.
  > label:not(:first-child) {
    margin-top: 6px;
  }

  // Add space between the box and the labels.
  > box:not(:first-child) {
    margin-top: 12px;
  }
}

tabbar .tab-indicator:not(.clickable) {
  background: none;
  box-shadow: none;
  border-color: transparent;
}

// window handle
.windowhandle {
  &, & * {
    // This is the most reliable way to enable window dragging
    -GtkWidget-window-dragging: true;
  }
}

// 3rd party application styles

// Nautilus
.nautilus-window {
  // Without this nautilus iconview grabs the bg_color
  notebook,
  notebook > stack:not(:only-child),
  notebook > stack:not(:only-child) searchbar { @extend %view; }

  headerbar, .titlebar {
    // Path-bar
    .path-bar-box {
      border-radius: $button_radius;
      border: none;
      padding-right: 6px;
      @include button(normal, $headerbar_color, $fg_color);

      &:backdrop {
        @include button(backdrop, $headerbar_color, $fg_color);
      }
    }

    .nautilus-path-bar {
      border-radius: $button_radius;
      @include button(normal, $headerbar_color, $fg_color);
      min-height: 34px;

      &:backdrop {
        @include button(backdrop, $headerbar_color, $fg_color);
      }

      button:not(.titlebutton) {
        margin: 0;
        padding-left: 8px;
        padding-right: 8px;

        &.current-dir {
          border-width: 0px;
          border-radius: $button_radius;
          background-color: transparent;
        }

        &:not(.current-dir) {
          border-width: 0px;
          border-radius: $button_radius;
          background-color: transparent;

          &:hover {
            @include button(active, $bg_color, $fg_color);
            * { opacity: 1; }
            &:backdrop {
              @include button(backdrop-active, $bg_color, $fg_color);
            }
          }
        }

        &.toggle.popup {
          @include button(normal, $headerbar_color, $fg_color);
          border-radius: 0 $button-radius $button-radius 0;
          border-left: 1px solid $borders_color;
          image { color: $fg_color; }

          &:hover { @include button(hover, $headerbar_color, $fg_color); }

          &:checked { @include button(active, $headerbar_color, $fg_color); }

          &:backdrop {
            @include button(backdrop, $bg_color, $fg_color);
            &:hover { @include button(normal, $bg_color, $fg_color); }
            border-left: 1px solid $borders_color;
          }
        }
      }
    }
  }

  .path-buttons-box {
    border: 2px solid transparent;

    button { min-height: 22px; }
  }

  .titlebar {
    :not(.raised) .linked > button {
      @extend %linked;
      @extend %headerbar_buttons;
    }
  }

  // Back and forward buttons
  .linked.raised button.image-button:not(:only-child) {
    &, &:backdrop, &:disabled, &:backdrop:disabled {
      @extend %headerbar_buttons;
      border: none;
    }
  }

  .linked button.disclosure-button:not(:hover):not(:checked):not(:active),
  .linked .image-button:not(:hover):not(:checked):not(:active):not(.model) {
    &, &:backdrop { background-color: transparent; }
  }

  .search + .toggle.popup {
    @extend %colored_buttons;
    border-left-color: $borders_color;
  }

  // Location entry button
  .linked entry ~ .image-button:not(:hover):not(:checked):not(:active):not(.model) { @extend %colored_buttons; }

  .view .dim-label { color: gtkalpha($fg_color, 0.55); }

  // Add a border around thumbnails
  .thumbnail {
    box-shadow: 0px 1px 2px 0px gtkalpha($borders_color, 0.5),
                0px 0px 0px 1px gtkalpha($borders_color, 0.5),
                0px 2px 0px 0px gtkalpha($borders_color, 0.5);
    border-radius: 2px;
    // Background for thumbnails with transparent areas.
    background: url('assets/Checkerboard.png') repeat;
  }

  .operations-list,
  .operations-list > :hover {
    background: none;
  }

  .nautilus-canvas-item { border-radius: 0px; }

  .nautilus-canvas-item.label-text { border-radius: $button_radius; }
}

// Floating status bar
.floating-bar {
  padding: 3px;
  background-color: $base_color;
  border-width: 1px;
  border-style: solid solid none;
  border-color: $borders_color;
  border-radius: 8px 0 0 0;
}
.floating-bar.bottom.left {
  border-left-style: none;
  border-top-left-radius: 0;
}
.floating-bar.bottom.right {
  border-right-style: none;
  border-top-right-radius: 0;
}
.floating-bar:backdrop {
  background-color: $base_color;
  border-color: $backdrop_borders_color;
}
.floating-bar button {
  padding: 0px;
}

// gnome-tweaks
list.tweak-categories separator.horizontal {
  background: transparent;
  margin: 2px 0;
}

// Chromium
window.background.chromium {
  background-color: if($color-scheme == 'light', $bg_color, gtkmix(white, $bg_color, 10%));

  entry,
  > button {
    border-color: if($color-scheme == 'light', gtkmix(black, $bg_color, 27%), gtkmix(white, $bg_color, 27%));
    background-color: if($color-scheme == 'light', gtkmix(black, $bg_color, 20%), gtkmix(white, $bg_color, 21%));
  }

  textview.view { 
    background-color: $base_color;
  }
}

// Firefox
#MozillaGtkWidget.background {
  button { font-weight: initial; }

  @if $color-scheme == 'light' {
    scrollbar slider {
      background-color: gtkalpha(currentColor, .4);
      &:hover { background-color: gtkalpha(currentColor, .6); }
    }
  }

  menuitem {
    check,
    radio {
      min-height: 12px;
      min-width: 12px;
    }
  }
}
@if $color-scheme == 'dark' {
  #MozillaGtkWidget {
    &.background { background-color: $headerbar_color; }

    > widget {
      border { border-color: $borders_color; }
    }
  }
}

// GNOME Builder
.org-gnome-Builder {
  .dzlmenubuttonitem {
    font-weight: normal;
    min-height: 32px;
  }
}

// GNOME Terminal
terminal-window notebook > header {
  &.top,
  &.bottom {
    tabs {
      &:not(:only-child) {
        &:first-child { margin-left: 0px; }
        &:last-child { margin-right: 0px; }
      }
    }
  }
}

