// Drawing mixins

@use 'functions' as *;
@use 'colors' as *;

// generic drawing of more complex things

@mixin focus-ring(
  $target: null,
  $width: 2px,
  $offset: -$width,
  $outer: false,
  $focus-state: ':focus',
  $fc: $focus_border_color
) {
  transition-property: outline, outline-width, outline-offset, outline-color;
  transition-duration: 300ms;
  animation-timing-function: ease-in-out;

  & #{$target} {
    outline: 0 solid transparent;
    outline-offset: if($outer, $offset + 4px, $offset + $width + 4px);
  }

  &#{$focus-state} #{$target} {
    outline-color: $fc;
    outline-width: $width;
    outline-offset: $offset;
  }
}

@function _widget_edge($c:$borders_edge) {
// outer highlight "used" on most widgets
  @if $c == none { @return none; }
  @else { @return 0 1px $c; }
}

@mixin _shadows($list...) {
//
// Helper mixin to stack up to box-shadows;
//
  $shadows: null;

  @each $shadow in $list {
    @if $shadow!=none { $shadows: $shadows, $shadow; }
  }

  box-shadow: $shadows;
}

// entries
@function entry_focus_border($fc: $focus_border_color) {
  @return $fc;
}

// buttons

@function _border_color($c, $darker: false) {
  @if $darker == true { @return gtkshade($c, 0.8); }
  @else { @return gtkshade($c, 0.9); }
}

@mixin button($t, $c:$bg_color, $tc:$fg_color, $edge: none, $backimage: null) {
  $base_bg: $c;
  $base_fg: $tc;

  @if $t == normal or $t == normal-alt {
    color: $base_fg;
    border-color: transparent;
    background: state-color($base_bg, $surface_fg_color, 0);
    box-shadow: none;
    text-shadow: none;
    -gtk-icon-shadow: none;
  } @else if $t == hover or $t == hover-alt {
    color: $base_fg;
    border-color: transparent;
    background: state-color($base_bg, $surface_fg_color, 1);
    box-shadow: none;
  } @else if $t == active {
    color: $base_fg;
    border-color: transparent;
    background: state-color($base_bg, $surface_fg_color, 2);
    box-shadow: none;
  } @else if $t == flat-hover {
    color: $accent_color;
    border-color: transparent;
    background: state-color($accent_bg_color, $surface_fg_color, 1);
    box-shadow: none;
  } @else if $t == flat-active {
    color: $accent_color;
    border-color: transparent;
    background: state-color($accent_bg_color, $surface_fg_color, 2);
    box-shadow: none;
  } @else if $t == insensitive {
    color: gtkalpha($base_fg, 0.38);
    border-color: transparent;
    background: gtkalpha($surface_fg_color, 0.12);
    box-shadow: none;
    text-shadow: none;
    -gtk-icon-shadow: none;
  } @else if $t == insensitive-active {
    color: gtkalpha($base_fg, 0.45);
    border-color: transparent;
    background: gtkalpha($surface_fg_color, 0.16);
    box-shadow: none;
  } @else if $t == backdrop {
    color: gtkalpha($base_fg, 0.8);
    border-color: transparent;
    background: gtkmix($base_bg, $bg_color, 0.1);
    box-shadow: none;
    text-shadow: none;
    -gtk-icon-shadow: none;
  } @else if $t == backdrop-active {
    color: gtkalpha($base_fg, 0.85);
    border-color: transparent;
    background: gtkmix($base_bg, $bg_color, 0.14);
    box-shadow: none;
  } @else if $t == backdrop-insensitive {
    color: gtkalpha($base_fg, 0.4);
    border-color: transparent;
    background: gtkmix($base_bg, $bg_color, 0.18);
    box-shadow: none;
    text-shadow: none;
    -gtk-icon-shadow: none;
  } @else if $t == backdrop-insensitive-active {
    color: gtkalpha($base_fg, 0.45);
    border-color: transparent;
    background: gtkmix($base_bg, $bg_color, 0.22);
    box-shadow: none;
  } @else if $t == osd {
    color: $osd_fg_color;
    border-color: transparent;
    background: gtkalpha(gtkmix(black, $window_fg_color, 0.85), 0.65);
    box-shadow: none;
  } @else if $t == osd-hover {
    color: white;
    border-color: transparent;
    background: gtkalpha(gtkmix(black, $window_fg_color, 0.75), 0.65);
    box-shadow: none;
  } @else if $t == osd-active {
    color: white;
    border-color: transparent;
    background: gtkalpha(gtkmix(black, $window_fg_color, 0.65), 0.65);
    box-shadow: none;
  } @else if $t == osd-insensitive {
    color: gtkmix($osd_fg_color, $osd_bg_color, 0.5);
    border-color: transparent;
    background: gtkalpha($osd_bg_color, 0.5);
    box-shadow: none;
    text-shadow: none;
    -gtk-icon-shadow: none;
  } @else if $t == osd-backdrop {
    color: $osd_fg_color;
    border-color: transparent;
    background: bg-color(-1);
    box-shadow: none;
  } @else if $t == undecorated {
    border-color: transparent;
    background: transparent;
    background-image: none;
    box-shadow: none;
    text-shadow: none;
    -gtk-icon-shadow: none;
  } @else {
    color: $base_fg;
    border-color: transparent;
    background: state-color($base_bg, $surface_fg_color, 0);
    box-shadow: none;
  }
}

@mixin headerbar_fill($c:$headerbar_bg_color, $hc:$top_hilight, $ov: none) {
//
// headerbar fill
//
// $c:  base color
// $hc: top highlight color
// $ov: a background layer for background shorthand (hence no commas!)
//
  $gradient: linear-gradient(to top, $c, $c);

  @if $ov != none { background: $c $ov, $gradient; }
  @else { background: $c $gradient; }

  box-shadow: inset 0 2px 1px 0 $hc; // top highlight
}

@mixin overshoot($p, $t:normal, $c:$fg_color) {
//
// overshoot
//
// $p: position
// $t: type
// $c: base color
//
// possible $p values:
// top, bottom, right, left
//
// possible $t values:
// normal, backdrop
//

  $_small_gradient_length: 5%;
  $_big_gradient_length: 100%;

  $_position: center top;
  $_small_gradient_size: 100% $_small_gradient_length;
  $_big_gradient_size: 100% $_big_gradient_length;

  @if $p==bottom {
    $_position: center bottom;
    $_linear_gradient_direction: to top;
  }

  @else if $p==right {
    $_position: right center;
    $_small_gradient_size: $_small_gradient_length 100%;
    $_big_gradient_size: $_big_gradient_length 100%;
  }

  @else if $p==left {
    $_position: left center;
    $_small_gradient_size: $_small_gradient_length 100%;
    $_big_gradient_size: $_big_gradient_length 100%;
  }

  $_small_gradient_color: $c;
  $_big_gradient_color: $c;

  @if $c==$fg_color {
    $_small_gradient_color: gtkshade($borders_color, 0.9);
    $_big_gradient_color: $fg_color;

    @if $t==backdrop { $_small_gradient_color: $backdrop_borders_color; }
  }

  $_small_gradient: -gtk-gradient(radial,
                                  $_position, 0,
                                  $_position, 0.5,
                                  to($_small_gradient_color),
                                  to(gtkalpha($_small_gradient_color, 0)));

  $_big_gradient: -gtk-gradient(radial,
                                $_position, 0,
                                $_position, 0.6,
                                from(gtkalpha($_big_gradient_color, 0.07)),
                                to(gtkalpha($_big_gradient_color, 0)));

  @if $t==normal {
    background-image: $_small_gradient, $_big_gradient;
    background-size: $_small_gradient_size, $_big_gradient_size;
  }

  @else if $t==backdrop {
    background-image: $_small_gradient;
    background-size: $_small_gradient_size;
  }

  background-repeat: no-repeat;
  background-position: $_position;

  background-color: transparent; // reset some properties to be sure to not inherit them somehow
  border: none;                  //
  box-shadow: none;              //
}

// ***************************
// * Check and Radio buttons *
// ***************************

 @mixin check($t, $c:$bg_color, $tc:$fg_color, $checked: false) {
  // Check/Radio drawing function
  //
  // $t:        check/radio type,
  // $c:        base button color for colored* types
  // $tc:       optional text color for colored* types
  // $checked:  bool to chose between checked/unchecked
  //
  // possible $t values:
  // normal, hover, active, insensitive, backdrop, backdrop-insensitive

  $_border_color: if($c==$checkradio_bg_color, $c, $trough_color);

  @if $t==normal  {
    background-clip: if($checked, border-box, padding-box);
    background-image: image($c);
    border-color: $_border_color;
    box-shadow: none;
    color: $tc;
  }

  @if $t==hover {
    &:not(:checked):not(:indeterminate) { border-color: $trough_hover_color; }
  }

  @if $t==active {
    box-shadow: none;
  }

  @if $t==insensitive {
    // FIXME: Background color looks bad when using gtkalpha
    box-shadow: none;
    background-image: image($c);
    color: gtkalpha($tc, $disabled_opacity);
    border-color: $_border_color;
  }
}
