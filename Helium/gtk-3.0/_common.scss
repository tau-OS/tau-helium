@function gtkalpha($c,$a) {
  @return unquote("alpha(#{$c},#{$a})");
}

$ease-out-quad: cubic-bezier(0.25, 0.46, 0.45, 0.94);
$asset_suffix: if($color-scheme=='dark', '-dark', '');
$backdrop_transition: 200ms ease-out;
$button_transition: 200ms ease-out;
$easing: 200ms ease-out;
$window_radius: 12px;
$button-radius: 8px;
$_headerbar_height: 47px;
$_hb_btn_pad: 8px;
$_switch_margin: 4px;
$insensitive-base-color: rgba(0, 0, 0, 0.03);

* {
  padding: 0;
  -GtkToolButton-icon-spacing: 8;
  -GtkTextView-error-underline-color: $error_color;

  -GtkScrolledWindow-scrollbar-spacing: 0;

  -GtkToolItemGroup-expander-size: 11;

  -GtkWidget-text-handle-width: 20;
  -GtkWidget-text-handle-height: 24;

  -GtkDialog-button-spacing: 8;
  -GtkDialog-action-area-border: 0;

  outline-color: gtkalpha(currentColor, 0.3);
  outline-style: dashed;
  outline-offset: -3px;
  outline-width: 1px;
  -gtk-outline-radius: $button-radius - 2;

  -gtk-secondary-caret-color: $selected_bg_color
}


/***************
 * Base States *
 ***************/
.background {
  color: $fg_color;
  background-color: $bg_color;

  &:backdrop {
    color: $backdrop_fg_color;
    background-color: $backdrop_bg_color;
    text-shadow: none;
    -gtk-icon-shadow: none;
  }
}

*:disabled { -gtk-icon-effect: dim; }

.gtkstyle-fallback {
  color: $fg_color;
  background-color: $bg_color;

  &:hover {
    color: $fg_color;
    background-color: lighten($bg_color, 10%);
  }

  &:active {
    color: $fg_color;
    background-color: darken($bg_color, 10%);
  }

  &:disabled {
    color: $insensitive_fg_color;
    background-color: $insensitive_bg_color;
  }

  &:selected {
    color: $selected_fg_color;
    background-color: $selected_bg_color;
  }
}

.view,
%view {
  color: $text_color;
  background-color: $base_color;

  &:backdrop {
    color: $backdrop_text_color;
    background-color: $backdrop_base_color;
    &:disabled { color: $backdrop_insensitive_color; }
  }

  &:disabled {
    color: $insensitive_fg_color;
    background-color: $insensitive_bg_color;
  }

  &:selected {
    &:focus, & {
      @extend %selected_items;

      border-radius: $button_radius;
    }
  }
}

.view,
textview {
  text {
    @extend %view;

    selection { &:focus, & { @extend %selected_items; }}
  }
}

textview border { background-color: mix($bg_color, $base_color, 50%); }

iconview { @extend .view; }

.rubberband,
rubberband {
  border: 1px solid darken($selected_bg_color, 10%);
  background-color: transparentize(darken($selected_bg_color, 10%), 0.8);
}

flowbox {
  rubberband { @extend rubberband; }

  flowboxchild {
    padding: 3px;

    &:selected {
      @extend %selected_items;

      outline-offset: -2px;
    }
  }
}

.content-view .tile {
  margin: 2px;
  background-color: if($color-scheme=='light', transparent, black);
  border-radius: 0;
  padding: 0;
  
  &:backdrop { background-color: if($color-scheme=='light', transparent, darken($backdrop_base_color,5%)); }
  &:active, &:selected { background-color: if($color-scheme=='light', transparent, $selected_bg_color); }
  &:disabled { background-color: if($color-scheme=='light', transparent, $insensitive_bg_color); }
}

label {
  caret-color: currentColor; // this shouldn't be needed.

  &.separator {
    @extend .dim-label;
  }

  &:selected { @extend %nobg_selected_items; }

  selection {
    background-color: $selected_bg_color;
    color: $selected_fg_color;
  }

  &:disabled {
    color: $insensitive_fg_color;

    button & { color: inherit; }

    &:backdrop {
      color: $backdrop_insensitive_color;

      button & { color: inherit; }
    }

    selection { @extend %selected_items_disabled; }
  }

  &:backdrop {
    selection { @extend %selected_items_backdrop; }
  }

  &.error {
    color: $error_color;
    &:disabled { color: transparentize($error_color,0.5); }
    &:disabled:backdrop { color: transparentize($error_color,0.6); }
  }
}

.dim-label {
  opacity: 0.55;
  text-shadow: none;
}

%osd,
.osd {
  color: $osd_fg_color;
  border: none;
  background-color: $osd_bg_color;
  background-clip: padding-box;
  text-shadow: 0 1px black;
  -gtk-icon-shadow: 0 1px black;

  &:backdrop {
    text-shadow: none;
    -gtk-icon-shadow: none;
  }
}

/*********************
 * Spinner Animation *
 *********************/
@keyframes spin {
  to { -gtk-icon-transform: rotate(1turn); }
}

spinner {
  background: none;
  &:backdrop { color: $backdrop_fg_color; }
  opacity: 0; // non spinning spinner makes no sense
  -gtk-icon-source: -gtk-icontheme('process-working-symbolic');

  &:checked {
    opacity: 1;
    animation: spin 1s linear infinite;

    &:disabled { opacity: 0.5; }
  }
}

/**********************
 * General Typography *
 **********************/

.large-title {
   font-weight: 400;
   font-size: 24pt;
}
.title-1 {
   font-weight: 800;
   font-size: 20pt;
}
.title-2 {
   font-weight: 800;
   font-size: 15pt;
}
.title-3 {
   font-weight: 700;
   font-size: 15pt;
}
.title-4 {
   font-weight: 700;
   font-size: 13pt;
}
.heading {
   font-weight: 700;
   font-size: 10pt;
   text-transform: uppercase;
}
.body {
   font-weight: 400;
   font-size: 10pt;
}
.caption-heading {
   font-weight: 700;
   font-size: 12pt;
}
.caption {
   font-weight: 700;
   font-size: 10pt;
}

selection {
    background-color: #{'@selected_bg_color'};
    color: #{'@selected_fg_color'};

    &:backdrop {
        background-color: #{'@theme_unfocused_selected_bg_color'};
        color: #{'@theme_unfocused_selected_fg_color'};
    }
}

separator {
    &.horizontal {
        border-top: 1px solid #{'@borders_color'};
        border-bottom: 1px solid #{'@borders_color'};
        margin-bottom: -1px;
    }

    &.vertical {
        border-left: 1px solid #{'@borders_color'};
        border-right: 1px solid #{'@borders_color'};
        margin-right: -1px;
    }

    actionbar > &,
    toolbar > &,
    .titlebar > & {
        border: none;
        margin: 0 rem(18px);
    }

    stacksidebar &.horizontal {
        border: none;
    }

    &.titlebutton {
        border: none;
        margin: 0 rem(3px);
    }
}

%titlebar,
headerbar {
  padding: 0 6px;
  min-height: $_headerbar_height;
  border-width: 0 0 1px;
  border-style: solid;
  borders_color: $headerbar_border;
  border-radius: 0;

  @include headerbar_fill;

  &.default-decoration {
    min-height: 36px;
    padding: 0 6px 0 6px;

    button.titlebutton {
      border-radius: 12px;
      background-color: $titlebutton_normal;
      min-height: 24px;
      min-width: 24px;
      margin: 0 4px 0 4px;
      padding: 0;
      transition: $button_transition;
      &:hover { background-color: $titlebutton_normal_hover; }
      &:hover:active, &:active { background-color: $titlebutton_normal_active; }
      &:backdrop { background: $titlebutton_backdrop; }
      &:backdrop:hover { background: $titlebutton_backdrop_hover; }
    }
  }

  separator.titlebutton { opacity: 0; }

  .solid-csd & {
    &:backdrop, & {
      &:dir(rtl), &:dir(ltr) {
        margin-left: -1px;
        margin-right: -1px;
        margin-top: -1px;
        border-radius: 0;
        box-shadow: none;
      }
    }
  }
}

headerbar {
  entry,
  spinbutton,
  separator:not(.sidebar),
  button {
    margin-top: $_hb_btn_pad;
    margin-bottom: $_hb_btn_pad;
  }
  switch {
    margin-top: $_switch_margin;
    margin-bottom: $_switch_margin;
  }

  &.titlebar headerbar:not(.titlebar) {
    background: none;
    box-shadow: none;
  }
}

.background .titlebar {
  &:backdrop, & {
    border-top-left-radius: $window_radius;
    border-top-right-radius: $window_radius;
  }
}

.background.tiled .titlebar,
.background.tiled-top .titlebar,
.background.tiled-right .titlebar,
.background.tiled-bottom .titlebar,
.background.tiled-left .titlebar,
.background.maximized .titlebar,
.background.solid-csd .titlebar {
  &:backdrop, & {
    border-top-left-radius: 0;
    border-top-right-radius: 0;
  }
}

headerbar {
  window separator:first-child + &,
  window &:first-child { &:backdrop, & { border-top-left-radius: $window_radius; }}
  window &:last-child { &:backdrop, & { border-top-right-radius: $window_radius; }}

  window stack & {
    &:first-child, &:last-child {
      &:backdrop, & {
        border-top-left-radius: $window_radius;
        border-top-right-radius: $window_radius;
      }
    }
  }

  window.tiled &,
  window.tiled-top &,
  window.tiled-right &,
  window.tiled-bottom &,
  window.tiled-left &,
  window.maximized &,
  window.fullscreen &,
  window.solid-csd & {
    &, &:backdrop {
      &,
      &:first-child,
      &:last-child,
      &:only-child {
        border-top-left-radius: 0;
        border-top-right-radius: 0;
      }
    }
  }
}

.titlebar:not(headerbar) {
  window.csd > & {
    padding: 0;
    background-color: transparent;
    background-image: none;
    border-style: none;
    borders_color: transparent;
    box-shadow: none;
  }

  separator {
    background-color: $borders_color;
    &:backdrop { background-color: $backdrop_borders_color; }
  }

  @extend %titlebar;
}

.composited-indicator {
  padding: 0 6px;
}

.composited-indicator > revealer label,
.composited-indicator > revealer image,
.composited-indicator > revealer spinner {
  color: #f0f0f2;
  font-weight: bold;
  text-shadow:
      0 0 2px gtkalpha(#2d2d2d, 0.3),
      0 1px 2px gtkalpha(#2d2d2d, 0.6);
  transition: all 200ms ease-in-out;
  -gtk-icon-shadow:
      0 0 2px gtkalpha(#2d2d2d, 0.3),
      0 1px 2px gtkalpha(#2d2d2d, 0.6);
  -gtk-icon-palette:
      error $error_color,
      success $success_color,
      warning $warning_color;
}

.panel.color-light .composited-indicator > revealer label,
.panel.color-light .composited-indicator > revealer image,
.panel.color-light .composited-indicator > revealer spinner {
  color: gtkalpha(#2d2d2d, 0.65);
  text-shadow:
      0 0 2px gtkalpha(#f0f0f2, 0.3),
      0 1px 0 gtkalpha(#f0f0f2, 0.25);
  -gtk-icon-shadow:
      0 0 2px gtkalpha(#f0f0f2, 0.3),
      0 1px 0 gtkalpha(#f0f0f2, 0.25);
  -gtk-icon-palette:
      error $error_color,
      success $success_color,
      warning $warning_color;
}

.panel {
  background-color: transparent;
  transition: all 100ms ease-in-out;
  margin-bottom: 0;
  min-height: 16px;
}

.panel.maximized {
  background-color: #2d2d2d;
}

.panel.translucent {
  background-color: gtkalpha(#2d2d2d, 0.5);
  box-shadow:
      0 1px 3px gtkalpha(#2d2d2d, 0.24),
      0 1px 1px gtkalpha(#2d2d2d, 0.52);
  margin-bottom: 4px;
}

.panel.color-light.translucent {
  background-color: gtkalpha(#f0f0f2, 0.85);
  box-shadow:
      inset 0 -1px 1px gtkalpha(#f0f0f2, 0.2),
      0 1px 3px gtkalpha(#2d2d2d, 0.24),
      0 1px 1px gtkalpha(#2d2d2d, 0.12);
  margin-bottom: 4px;
}

.panel menubar {
  background: transparent;
  box-shadow: none;
  border: none;
}

.mic-icon {
    animation: none;
    min-width: 24px;
    opacity: 1;
    transition: none;
    -gtk-icon-source: -gtk-icontheme("audio-input-microphone-symbolic");
}

.mic-icon.disabled {
    animation: microphone-disabled 160ms cubic-bezier(0.4, 0.0, 0.2, 1);
    -gtk-icon-source: -gtk-icontheme("microphone-sensitivity-muted-symbolic");
}

@keyframes microphone-disabled {
    0% { -gtk-icon-source: -gtk-icontheme("audio-input-microphone-symbolic"); }
    10% { -gtk-icon-source: -gtk-icontheme("microphone-sensitivity-muted-10-symbolic"); opacity: 0.94; }
    20% { -gtk-icon-source: -gtk-icontheme("microphone-sensitivity-muted-20-symbolic"); opacity: 0.88; }
    30% { -gtk-icon-source: -gtk-icontheme("microphone-sensitivity-muted-30-symbolic"); opacity: 0.82; }
    40% { -gtk-icon-source: -gtk-icontheme("microphone-sensitivity-muted-40-symbolic"); opacity: 0.76; }
    50% { -gtk-icon-source: -gtk-icontheme("microphone-sensitivity-muted-50-symbolic"); opacity: 0.70; }
    60% { -gtk-icon-source: -gtk-icontheme("microphone-sensitivity-muted-60-symbolic"); opacity: 0.64; }
    70% { -gtk-icon-source: -gtk-icontheme("microphone-sensitivity-muted-70-symbolic"); opacity: 0.58; }
    80% { -gtk-icon-source: -gtk-icontheme("microphone-sensitivity-muted-80-symbolic"); opacity: 0.52; }
    90% { -gtk-icon-source: -gtk-icontheme("microphone-sensitivity-muted-90-symbolic"); opacity: 0.46; }
    100% { -gtk-icon-source: -gtk-icontheme("microphone-sensitivity-muted-symbolic"); }
}

.header-label {
    font-weight: 300;
    font-size: 1.66em;
}
.event {
    background: $selected_bg_color;
    border-radius: 3px;
    padding: 6px;
}

.event label,
.event image {
    color: $selected_fg_color;
}

.event .title {
    font-weight: 600;
}
.accent {
    font-weight: bold;
}

grid:disabled .accent {
    color: $insensitive_color;
}

grid-day {
    padding: 0.6em 0;
}

grid-day label {
    margin-top: 0.2em;
    min-width: 2em;
    min-height: 2em;
}

grid-day:selected label {
    background: $selected_bg_color;
    color: $selected_fg_color;
}

.bluetooth-icon {
    animation: none;
    min-width: 24px;
    opacity: 1;
    transition: none;
    -gtk-icon-source: -gtk-icontheme("bluetooth-active-symbolic");
}

.bluetooth-icon.paired {
    animation: none;
    -gtk-icon-source: -gtk-icontheme("bluetooth-paired-symbolic");
}

.bluetooth-icon.disabled {
    animation: bluetooth-disabled 160ms cubic-bezier(0.4, 0.0, 0.2, 1);
    -gtk-icon-source: -gtk-icontheme("bluetooth-disabled-symbolic");
}

@keyframes bluetooth-disabled {
    0% { -gtk-icon-source: -gtk-icontheme("bluetooth-active-symbolic"); }
    10% { -gtk-icon-source: -gtk-icontheme("bluetooth-disabled-10-symbolic"); opacity: 0.94; }
    20% { -gtk-icon-source: -gtk-icontheme("bluetooth-disabled-20-symbolic"); opacity: 0.88; }
    30% { -gtk-icon-source: -gtk-icontheme("bluetooth-disabled-30-symbolic"); opacity: 0.82; }
    40% { -gtk-icon-source: -gtk-icontheme("bluetooth-disabled-40-symbolic"); opacity: 0.76; }
    50% { -gtk-icon-source: -gtk-icontheme("bluetooth-disabled-50-symbolic"); opacity: 0.70; }
    60% { -gtk-icon-source: -gtk-icontheme("bluetooth-disabled-60-symbolic"); opacity: 0.64; }
    70% { -gtk-icon-source: -gtk-icontheme("bluetooth-disabled-70-symbolic"); opacity: 0.58; }
    80% { -gtk-icon-source: -gtk-icontheme("bluetooth-disabled-80-symbolic"); opacity: 0.52; }
    90% { -gtk-icon-source: -gtk-icontheme("bluetooth-disabled-90-symbolic"); opacity: 0.46; }
    100% { -gtk-icon-source: -gtk-icontheme("bluetooth-disabled-symbolic"); }
}

.notification-icon {
    animation: none;
    min-width: 24px;
    opacity: 1;
    transition: none;
    -gtk-icon-source: -gtk-icontheme("notification-symbolic");
}

.notification-icon.new {
    animation: notification-new 500ms cubic-bezier(0.4, 0.0, 0.2, 1);
    -gtk-icon-source: -gtk-icontheme("notification-new-symbolic");
}

.notification-icon.disabled {
    animation: notification-disabled 160ms cubic-bezier(0.4, 0.0, 0.2, 1);
    -gtk-icon-source: -gtk-icontheme("notification-disabled-symbolic");
}

@keyframes notification-disabled {
    0% { -gtk-icon-source: -gtk-icontheme("notification-symbolic"); }
    10% { -gtk-icon-source: -gtk-icontheme("notification-disabled-10-symbolic"); opacity: 0.94; }
    20% { -gtk-icon-source: -gtk-icontheme("notification-disabled-20-symbolic"); opacity: 0.88; }
    30% { -gtk-icon-source: -gtk-icontheme("notification-disabled-30-symbolic"); opacity: 0.82; }
    40% { -gtk-icon-source: -gtk-icontheme("notification-disabled-40-symbolic"); opacity: 0.76; }
    50% { -gtk-icon-source: -gtk-icontheme("notification-disabled-50-symbolic"); opacity: 0.70; }
    60% { -gtk-icon-source: -gtk-icontheme("notification-disabled-60-symbolic"); opacity: 0.64; }
    70% { -gtk-icon-source: -gtk-icontheme("notification-disabled-70-symbolic"); opacity: 0.58; }
    80% { -gtk-icon-source: -gtk-icontheme("notification-disabled-80-symbolic"); opacity: 0.52; }
    90% { -gtk-icon-source: -gtk-icontheme("notification-disabled-90-symbolic"); opacity: 0.46; }
    100% { -gtk-icon-source: -gtk-icontheme("notification-disabled-symbolic"); }
}

@keyframes notification-new {
    0% { -gtk-icon-source: -gtk-icontheme("notification-symbolic"); }
    10% { -gtk-icon-source: -gtk-icontheme("notification-new-10-symbolic"); }
    20% { -gtk-icon-source: -gtk-icontheme("notification-new-20-symbolic"); }
    30% { -gtk-icon-source: -gtk-icontheme("notification-new-30-symbolic"); }
    40% { -gtk-icon-source: -gtk-icontheme("notification-new-40-symbolic"); }
    50% { -gtk-icon-source: -gtk-icontheme("notification-new-50-symbolic"); }
    60% { -gtk-icon-source: -gtk-icontheme("notification-new-60-symbolic"); }
    70% { -gtk-icon-source: -gtk-icontheme("notification-new-70-symbolic"); }
    80% { -gtk-icon-source: -gtk-icontheme("notification-new-80-symbolic"); }
    90% { -gtk-icon-source: -gtk-icontheme("notification-new-90-symbolic"); }
    100% { -gtk-icon-source: -gtk-icontheme("notification-new-symbolic"); }
}

.night-light-icon {
    animation: none;
    min-width: 24px;
    opacity: 1;
    transition: none;
    -gtk-icon-source: -gtk-icontheme("night-light-symbolic");
}

.night-light-icon.disabled {
    animation: night-light-disabled 160ms cubic-bezier(0.4, 0.0, 0.2, 1);
    -gtk-icon-source: -gtk-icontheme("night-light-disabled-symbolic");
}

@keyframes night-light-disabled {
    0% { -gtk-icon-source: -gtk-icontheme("night-light-symbolic"); }
    10% { -gtk-icon-source: -gtk-icontheme("night-light-disabled-10-symbolic"); opacity: 0.94; }
    20% { -gtk-icon-source: -gtk-icontheme("night-light-disabled-20-symbolic"); opacity: 0.78; }
    30% { -gtk-icon-source: -gtk-icontheme("night-light-disabled-30-symbolic"); opacity: 0.82; }
    40% { -gtk-icon-source: -gtk-icontheme("night-light-disabled-40-symbolic"); opacity: 0.76; }
    50% { -gtk-icon-source: -gtk-icontheme("night-light-disabled-50-symbolic"); opacity: 0.70; }
    60% { -gtk-icon-source: -gtk-icontheme("night-light-disabled-60-symbolic"); opacity: 0.64; }
    70% { -gtk-icon-source: -gtk-icontheme("night-light-disabled-70-symbolic"); opacity: 0.58; }
    80% { -gtk-icon-source: -gtk-icontheme("night-light-disabled-80-symbolic"); opacity: 0.52; }
    90% { -gtk-icon-source: -gtk-icontheme("night-light-disabled-90-symbolic"); opacity: 0.46; }
    100% { -gtk-icon-source: -gtk-icontheme("night-light-disabled-symbolic"); }
}

.keyboard-icon {
    background-color: #fff;
    border-radius: 2px;
    box-shadow:
        0 0 2px alpha (#000, 0.3),
        0 1px 2px alpha (#000, 0.6);
    color: #333;
    font-weight: 600;
    padding: 0 3px;
    text-shadow: none;
}

.panel.color-light .keyboard-icon {
    background-color: alpha (#000, 0.65);
    box-shadow:
        0 0 2px alpha (#fff, 0.3),
        0 1px 0 alpha (#fff, 0.25);
    color: #fff;
}

popover {
    @extend %menu;
    background-clip: padding-box;
    border: 1px solid $borders_color;
    box-shadow: shadow(2);
    margin: 6px;

    label.h4 {
        margin: 0 rem(12px);
    }

    // Fixes extra padding in switch modelbuttons
    menuitem.h4 label {
        padding: 0;
    }

    menuitem,
    modelbutton,
    .menuitem {
        @extend %menuitem;
    }

    separator {
        &.horizontal {
            border-top: 1px solid #{'@borders_color'};
            border-bottom: 1px solid #{'@borders_color'};
            margin-bottom: -1px;
        }

        &.vertical {
            border-left: 1px solid #{'@borders_color'};
            border-right: 1px solid #{'@borders_color'};
            margin-right: -1px;
        }
    }

    undershoot {
        &.top {
            background:
                linear-gradient(
                    bg_color(2) 0%,
                    rgba(bg_color(2), 0) 50%
                );
        }

        &.bottom {
            background:
                linear-gradient(
                    rgba(bg_color(2), 0) 50%,
                    bg_color(2) 100%
                );
        }
    }
}
%menu {
    background-color: bg_color(2);
    border-radius: rem(6px);
    color: $fg_color;

    arrow {
        -gtk-icon-source: -gtk-icontheme("pan-end-symbolic");
        min-height: 16px;
        min-width: 16px;

        &:dir(rtl) {
            -gtk-icon-source: -gtk-icontheme("pan-end-symbolic-rtl");
        }

        &.top {
            border-bottom: 1px solid #{"@borders"};
            margin-top: -6px;
            -gtk-icon-source: -gtk-icontheme("pan-up-symbolic");
        }

        &.bottom {
            border-top: 1px solid #{"@borders"};
            margin-bottom: -18px;
            margin-top: 16px;
            -gtk-icon-source: -gtk-icontheme("pan-down-symbolic");
        }

        &.left {
            -gtk-icon-source: -gtk-icontheme("pan-start-symbolic");
        }

        &:disabled {
            color: $insensitive-fg-color;
        }
    }
}

%menuitem {
    color: $fg_color;
    font-weight: initial;
    letter-spacing: initial;
    min-width: rem(150px);
    padding: rem(6px) rem(12px);

    &:disabled {
        color: $insensitive_fg_color;

        .keycap {
            opacity: 0.7;
        }
    }

    &:hover {
        box-shadow: none;
        background-color: rgba($fg_color, 0.15);
    }

    &.destructive-action {
        color: $error-color;

        &:hover {
            background-color: rgba($error_color, 0.2);
        }
    }

    .keycap {
        background: rgba(black, 0.08);
        border: none;
        box-shadow: 0 1px 0 0 rgba(black, 0.15);
        color: #{'alpha(@fg_color, 0.78)'};
        margin: 0 0 1px;
        padding: rem(3px) rem(6px) calc(#{rem(3px)} - 1px);
    }

    check,
    radio {
        &.left {
            margin-right: rem(6px);
        }

        &.right {
            margin-left: rem(6px);
        }
    }

    switch slider {
        min-height: rem(20px);
        min-width: rem(20px);
    }
}

menu,
window.menu,
window.popup {
    @extend %menu;
    box-shadow: outset-highlight();
    padding: rem(6px) 0;

    &.context-menu {
        font: initial;
    }

    decoration {
        border-radius: rem(6px);
        box-shadow:
            0 0 0 1px $borders_color,
            shadow(2);
    }

    window.popup decoration {
        box-shadow:
            0 0 0 1px $borders_color,
            shadow(3);
    }

    menuitem,
    .menuitem {
        @extend %menuitem;

        &:dir(ltr) {
            image:first-child {
                margin-left: rem(-23px);
                padding-left: 0;
                padding-right: rem(5px);
            }

            > check,
            > radio {
                margin-right: rem(6px);
                margin-left: rem(-6px);
            }
        }

        &:dir(rtl) {
            image:first-child {
                margin-right: rem(-23px);
                padding-left: rem(5px);
                padding-right: 0;
            }

            > check,
            > radio {
                margin-left: rem(6px);
                margin-right: rem(-6px);
            }
        }
    }

    separator {
        border-top: 1px solid #{'@borders_color'};
        border-bottom: 1px solid #{'@borders_color'};
        margin: rem(3px) 0;
    }
}

button {
    background-clip: padding-box;
    border-radius: rem(3px);
    -gtk-outline-radius: rem(5px);
    color: #{'@fg_color'};
    padding: rem(4px) rem(7px);
    transition: background duration("in-place") $easing;

    &.flat,
    &.image-button:not(.text-button) {
        background: none;
        border: none;
        box-shadow: none;

        &:checked {
            background: rgba($fg_color, 0.15);
        }

        &:focus {
            @extend selection;
            outline-style: none;
        }

        headerbar & {
            border-radius: 99px;
        }
    }

    .linked &.flat,
    .linked &.image-button,
    .linked &.image-button:not(.text-button),
    &.circular.image-button,
    &.model.image-button,
    &.raised.image-button,
    & {
        background-clip: padding-box;
        background-color: bg-color(0);
        border: 1px solid $borders_color;

        headerbar & {
            border-radius: rem(3px);
        }

        &.destructive-action:not(:disabled) {

            &,
            &:focus {
                @if $color-scheme == "light" {
                    background-clip: border-box;
                    border: 1px solid $borders_color;
                } @else if $color-scheme == "dark" {
                    &:active,
                    &:checked {
                        borders_color: rgba(black, 0.7);
                    }
                }
            }

            background-color: $error_color;
            color: white;
            text-shadow: 0 1px 1px $error_color;
            -gtk-icon-shadow: 0 1px 1px $error_color;

            &:focus {
                outline-color: rgba($error_color, 0.5);
            }
        }

        &.suggested-action:not(:disabled) {
            @if $color-scheme == "light" {
                borders_color: #{'alpha (mix (black, @selected_bg_color, 0.9), 0.5)'};

                &:backdrop {
                    borders_color: $borders_color;
                }
            }

            image,
            label {
                color: inherit;
            }

            &:active,
            &:checked {
                @if $color-scheme == "light" {
                    borders_color: #{'alpha (mix (black, @selected_bg_color, 0.7), 0.4)'};
                } @else if $color-scheme == "dark" {
                    borders_color: rgba(black, 0.5);
                }
            }
        }

        &.titlebutton:not(:active) {
            background: none;
            borders_color: transparent;
            box-shadow: none;
        }

        &:active,
        &:checked {
            background: rgba(black, 0.05);
            box-shadow: inset-shadow();

            @if $color-scheme == "dark" {
                background: rgba(black, 0.15);
            }
        }

        &:disabled {
            background: rgba(black, 0.03);
            box-shadow:
                outset-highlight("full"),
                outset-shadow(1);
        }

        &:focus {
            @if $color-scheme == "light" {
                borders_color: #{'@selected_bg_color'};
            }
            color: #{'@selected_fg_color'};
            outline-color: #{'alpha(@selected_bg_color, 0.3)'};
            outline-width: rem(2px);
            outline-style: solid;
        }
    }

    &.back-button {
        background-repeat: no-repeat no-repeat;
        background-size: 16px, cover;

        &:dir(ltr) {
            background-image:
                -gtk-icontheme('go-previous-symbolic'),
                linear-gradient(
                    to bottom,
                    #{'alpha(@highlight_color, 0.2)'},
                    rgba(white, 0)
                );
            padding-left: calc(#{rem(9px)} + 16px);
            background-position:
                #{rem(6px)} 50%,
                center, center;
        }

        &:dir(rtl) {
            background-image:
                -gtk-icontheme('go-next-symbolic'),
                linear-gradient(
                    to bottom,
                    #{'alpha(@highlight_color, 0.2)'},
                    rgba(white, 0)
                );
            padding-right: calc(#{rem(9px)} + 16px);
            background-position:
                calc(100% - #{rem(6px)}) 50%,
                center, center;
        }
    }

    &:disabled {
        color: $insensitive-fg-color;
    }

    &:backdrop {
        -gtk-icon-effect: dim;
    }

    &.color,
    &.combo,
    &.image-button,
    &.titlebutton {
        padding: rem(4px);
    }

    &.text-button.link {
        padding: 0;
    }

    &.color {
        colorswatch,
        overlay {
            border-radius: rem(2px);
        }
    }

    arrow {
        min-width: rem(16px);
        min-height: rem(16px);
        -gtk-icon-source: -gtk-icontheme("pan-down-symbolic");
    }

    label {
        font-weight: 500;
    }

    &:dir(ltr) image + label,
    &:dir(rtl) label + image {
        margin-left: rem(3px);
    }
}

check,
radio {
    background-color: bg-color(0);
    border: 1px solid $borders_color;
    box-shadow:
        outset-highlight(),
        outset-shadow(1);
    min-height: rem(12px);
    min-width: rem(12px);
    transition: all duration("in-place") $easing;
    -gtk-icon-source: none;

    &:checked {
        background-color: #{'@selected_bg_color'};
        color: white;
        -gtk-icon-source: -gtk-icontheme("check-active-symbolic");
        -gtk-icon-shadow: 0 1px 1px #{'shade(@selected_bg_color, 0.7)'};

        @if $color-scheme == "dark" {
            background-clip: padding-box;
        }

        &:backdrop:not(:disabled):not(.colorbutton) {
            background-image: none;
            background-color: bg-color(4);
            -gtk-icon-shadow: 0 1px 1px $borders_color;
        }
    }

    &:disabled {
        background: $insensitive-base-color;
        box-shadow: 0 1px 0 0 #{'alpha (@bg_highlight_color, 0.3)'};
        color: $insensitive-fg-color;
        -gtk-icon-shadow: 0 1px 1px #{'alpha (@bg_highlight_color, 0.3)'};
    }

    &:indeterminate {
        -gtk-icon-source: -gtk-icontheme("check-mixed-symbolic");
    }

    &:focus {
        &:not(:checked) {
            @if $color-scheme == "light" {
                borders_color: #{'@selected_bg_color'};
            }
        }

        box-shadow:
            0 0 0 2px #{'alpha(@selected_bg_color, 0.3)'},
            outset-highlight(),
            outset-shadow(1);
    }
}

check {
    border-radius: rem(3px);
}

radio {
    border-radius: 50%;
}

radiobutton,
checkbutton {
    image,
    label {
        &:dir(ltr) {
            margin-left: rem(6px);
        }

        &:dir(rtl) {
            margin-right: rem(6px);
        }
    }

    &.image-button {
        border: 1px solid transparent;
    }

    &.image-button:checked {
        background: #{'alpha(@selected_bg_color, 0.4)'};
        borders_color: #{'@selected_bg_color'};
        border-radius: rem(3px);
        color: #{'@selected_fg_color'};

        &:backdrop {
            background: rgba($fg_color, 0.05);
            borders_color: rgba($fg_color, 0.25);
            color: inherit;
        }
    }
}

radiobutton.image-button {
    padding: rem(6px);

    &:checked:not(:backdrop) image {
        color: #{'@selected_fg_color'};
    }
}

%entry {
    background-color: bg-color(1);
    background-clip: padding-box;
    border: 1px solid $borders_color;
    border-radius: rem(3px);
    box-shadow: inset-shadow("");
    color: #{'@fg_color'};

    &:disabled {
        background: $insensitive-base-color;
        box-shadow: inset-shadow("disabled");
        color: $insensitive-fg-color;
    }

    &.flat {
        background: transparent;
        borders_color: transparent;
        border-radius: 0;
        box-shadow: none;

        &:focus {
            border-bottom-color: #{'@selected_bg_color'};
        }
    }

    &:focus {
        @if $color-scheme == "light" {
            borders_color: #{'@selected_bg_color'};
        }
        box-shadow:
            0 0 0 rem(2px) #{'alpha(@selected_bg_color, 0.3)'},
            inset-shadow();
    }
}

entry {
    @extend %entry;
    // Prevent size change when setting primary or secondary icons
    min-height: 16px;
    // Off-by-one to account for padding-box clip
    padding: rem(4px);

    image {
        color: #{'@placeholder_text_color'};
        transition: all duration("in-place") $easing;
    }

    image.left {
        margin-right: rem(6px);
    }

    image.right {
        margin-left: rem(6px);
    }

    // We only want the action side icon to react on hover
    &:dir(ltr) image.right:hover,
    &:dir(rtl) image.left:hover {
        color: $fg_color;
    }

    // Fixes an issue in Epiphany
    headerbar & {
        margin: 1px;
    }
}

switch {
  padding: 4px;
  border-radius: 99px;
  background-color: $trough_color;

  &:hover:not(:checked) {
    background-color: $trough_hover_color;color: $selected_fg_color;
    &:active { background-color: $trough_active_color;color: $selected_fg_color; }
  }

  &:checked {
    color: $selected_fg_color;
    background-color: $checkradio_bg_color;
    &:hover {
      background-image: image(gtkalpha(currentColor, .1));color: $selected_fg_color;
      &:active { background-image: image(transparentize(black, .8));color: $selected_fg_color; }
    }
  }

  &:disabled {
    color: $insensitive_fg_color;
    border-color: transparent;
    background-color: $backdrop_dark_fill;
    text-shadow: none;
  }

  &:backdrop {
    color: $backdrop_fg_color;
    border-color: $backdrop_borders_color;
    background-color: $backdrop_dark_fill;
    text-shadow: none;
    transition: $backdrop_transition;

    &:checked {
      @if $color-scheme == 'light' { color: $backdrop_bg_color; }
      //border-color: if($color-scheme == 'light', $checkradio_borders_color,
      //                                      $selected_borders_color);
      background-color: transparentize($checkradio_bg_color, 0.5);
    }
  }

  slider {
    margin: 4px;
    min-width: 8px;
    min-height: 8px;
    background-color: transparent;
    border: 5px solid transparentize($fg_color, .5);
    border-radius: 50%;
    box-shadow: none;
    -gtk-outline-radius: 99px;
    padding: 0px;
  }
  
  image { color: transparent; } /* only show i / o for the accessible theme */

  &:hover slider {
    border: 5px solid $fg_color;
  }

  &:checked > slider { 
    border: 5px solid $selected_fg_color;
    background-color: $selected_fg_color;
    margin: 0px;
    min-width: 16px;
    min-height: 16px;
  }

  &:disabled slider {
    //@include button(insensitive);
    border: 5px solid $slider_color;
    box-shadow: none;
  }

  &:backdrop {
    slider {
      transition: $backdrop_transition;

      //@include button(backdrop);
      border: 5px solid $slider_color;
    }

    &:checked > slider { border: 5px solid $slider_hover_color; }

    &:disabled slider { border: 5px solid $slider_color; }
  }

  row:selected & {
    @if $color-scheme == 'light' {
      box-shadow: none;
      border-color: $checkradio_borders_color;

      &:backdrop { border-color: $checkradio_borders_color; }

      > slider { &:checked, & { border-color: $checkradio_borders_color; } }
    }
  }
}

%scale_trough {
  border-radius: 999px;
  background-color: $trough_color;

  &:disabled { background-color: $backdrop_dark_fill; }

  &:backdrop {
    background-color: $backdrop_dark_fill;
    border-color: $backdrop_borders_color;
    transition: $backdrop_transition;

    &:disabled { background-color: $backdrop_dark_fill; }
  }

  // ...on selected list rows
  row:selected & { &:disabled, & { border-color: $selected_borders_color; }}

  // OSD
  .osd & {
    border-color: $osd_borders_color;
    background-color: transparentize($osd_borders_color, 0.2);

    &:disabled { background-color: $osd_insensitive_bg_color; }
  }
}

%scale_highlight {
  border-radius: 999px 0 0 999px;
  background-color: transparentize($fill_color, 0.5);
  color: $fill_text_color;

  &:disabled {
    background-color: transparent;
    border-color: transparent;
  }

  &:backdrop {
    border-color: if($color-scheme=='light', $progress_bg_color,
                                        $progress_border_color);
    &:disabled {
      background-color: transparent;
      border-color: transparent;
    }
  }

  // ...on selected list rows
  row:selected & { &:disabled, & { border-color: $selected_borders_color; }}

  // OSD
  .osd & {
    border-color: $osd_borders_color;

    &:disabled { border-color: transparent; }
  }
}

scale {
  // sizing
  $_marks_length: 6px;
  $_marks_distance: 6px;

  min-height: 16px;
  min-width: 16px;
  padding: 14px;

  slider {
    min-height: 18px;
    min-width: 18px;
  }

  // click-and-hold the slider to activate
  &.fine-tune {
    &.horizontal {
      padding-top: 8px;
      padding-bottom: 8px;
      min-height: 16px;
    }

    &.vertical {
      padding-left: 8px;
      padding-right: 8px;
      min-width: 16px;
    }

    // to make the trough grow in fine-tune mode
    slider { margin: -8px; }

    fill,
    highlight,
    trough {
      border-radius: 5px;
      -gtk-outline-radius: 7px;
    }
  }

  // the backing bit
  trough {
    @extend %scale_trough;

    outline-offset: 2px;
    -gtk-outline-radius: 5px;
  }

  // Match trough size to libadwaita
  &.horizontal trough { min-height: 4px; }
  &.vertical trough { min-width: 4px; }

  // the colored part of the backing bit
  highlight { @extend %scale_highlight; }

  // this is another differently styled part of the backing bit, the most relevant use case is for example
  // in media player to indicate how much video stream as been cached
  fill {
    @extend %scale_trough;

    &:backdrop, & { background-color: $borders_color; }

    &:disabled {
      &:backdrop, & {
        border-color: transparent;
        background-color: transparent;
      }
    }

    // OSD
    .osd & {
      background-color: mix($osd_fg_color, $osd_borders_color, 25%);

      &:disabled {
        &:backdrop, & {
          border-color: transparent;
          background-color: transparent;
        }
      }
    }
  }

  slider {
    background-color: $selected_bg_color;
    border-radius: 100%;
    transition: $button_transition;
    transition-property: background, border, box-shadow;

    &:hover { background-color: $selected_bg_color; }

    &:active { border-color: $selected_bg_color; }

    &:backdrop {
      transition: $backdrop_transition;
    }

    // ...on selected list rows
    row:selected & { &:disabled, & { border-color: $selected_borders_color; } }

    // OSD
    .osd & {
      background-color: $slider_color;
      border: 1px solid transparent;

      &:hover {
        background-color: $slider_hover_color;
      }

      &:backdrop {
        transition: $backdrop_transition;
      }
    }
  }

  marks,
  value {
    color: gtkalpha(currentColor, 0.55);
    font-feature-settings: "tnum";
  }

  //marks margins
  @each $scale_orient, $marks_class, $marks_pos, $marks_margin in (horizontal, top, top, bottom),
                                                                  (horizontal, bottom, bottom, top),
                                                                  (vertical, top, left, right),
                                                                  (vertical, bottom, right, left) {
    &.#{$scale_orient} marks {
      &.#{$marks_class} {
        margin-#{$marks_margin}: $_marks_distance;
        margin-#{$marks_pos}: -($_marks_distance + $_marks_length);
      }
    }

    &.#{$scale_orient}.fine-tune marks {
      &.#{$marks_class} {
        margin-#{$marks_margin}: $_marks_distance;
        margin-#{$marks_pos}: -($_marks_distance + $_marks_length - 3px);
      }
    }
  }

  &.horizontal {
    indicator {
      min-height: $_marks_length;
      min-width: 1px;
    }

    &.fine-tune indicator { min-height: ($_marks_length - 3px); }
  }

  &.vertical {
    indicator {
      min-height: 1px;
      min-width: $_marks_length;
    }

    &.fine-tune indicator { min-width: ($_marks_length - 3px); }
  }

  // *WARNING* scale with marks madness following

  // FIXME: OSD and selected list rows missing, I don't feel like adding the other 144 assets needed for those...
  $suffix: if($color-scheme == 'light', '', '-dark');

  @each $dir_class, $dir_infix in ('horizontal', 'horz'),
                                  ('vertical', 'vert') {
    @each $marks_infix, $marks_class in ('scale-has-marks-above', 'marks-before:not(.marks-after)'),
                                        ('scale-has-marks-below', 'marks-after:not(.marks-before)') {
      @each $state, $state_infix in ('', ''),
                                    (':hover', ''),
                                    (':disabled', '-insensitive'),
                                    (':backdrop', '-insensitive'),
                                    (':backdrop:disabled', '-insensitive') {
        &.#{$dir_class}.#{$marks_class} {

          slider {
            &#{$state} {
              // an asymmetric slider asset is used here, so the margins are uneven, the smaller
              // margin is set on the point side.
              margin: -10px;
              $_scale_asset: 'assets/slider-#{$dir_infix}-#{$marks_infix}#{$state_infix}#{$suffix}';
              border-style: none;
              border-radius: 0;

              background-color: transparent;
              background-image: -gtk-scaled(url('#{$_scale_asset}.png'), url('#{$_scale_asset}@2.png'));
              @if $color-scheme == 'dark' {
                &:hover, &:active {
                  background-image: -gtk-scaled(url('assets/slider-#{$dir_infix}-#{$marks_infix}.png'), url('assets/slider-#{$dir_infix}-#{$marks_infix}@2.png'));
                }
              }

              $_scale_slider_bg_pos: bottom;

              @if $dir_class == 'horizontal' {
                min-height: 28px;
                min-width: 23px;

                @if $marks_infix == 'scale-has-marks-above' {
                  margin-top: -14px;

                  $_scale_slider_bg_pos: top;
                }

                @else { margin-bottom: -14px; }
              }

              @else {
                min-height: 23px;
                min-width: 28px;

                @if $marks_infix == 'scale-has-marks-above' {
                  margin-left: -14px;

                  $_scale_slider_bg_pos: left bottom;
                }

                @else {
                  margin-right: -14px;

                  $_scale_slider_bg_pos: right bottom;
                }
              }

              background-position: $_scale_slider_bg_pos;
              background-repeat: no-repeat;
              box-shadow: none;
            }
          }

          &.fine-tune slider {
            // bigger negative margins to make the trough grow here as well
            margin: -7px;

            @if $dir_class == 'horizontal' {
              @if $marks_infix == 'scale-has-marks-above' { margin-top: -11px; }

              @else { margin-bottom: -11px; }
            }

            @else {
              @if $marks_infix == 'scale-has-marks-above' { margin-left: -11px; }

              @else { margin-right: -11px; }
            }
          }
        }
      }
    }
  }

  &.color {
    min-height: 0;
    min-width: 0;

    trough {
      background-image: image($borders_color);
      background-repeat: no-repeat;
    }

    &.horizontal {
      padding: 0 0 15px 0;

      trough {
        padding-bottom: 4px;
        background-position: 0 -3px;
        border-top-left-radius: 0;
        border-top-right-radius: 0;
      }

      slider {
        &:dir(ltr), &:dir(rtl) { // specificity bumb
          &:hover, &:backdrop, &:disabled, &:backdrop:disabled, & {
            margin-bottom: -15px;
            margin-top: 6px;
          }
        }
      }
    }

    &.vertical {
      &:dir(ltr) {
        padding: 0 0 0 15px;

        trough {
          padding-left: 4px;
          background-position: 3px 0;
          border-bottom-right-radius: 0;
          border-top-right-radius: 0;
        }

        slider {
          &:hover, &:backdrop, &:disabled, &:backdrop:disabled, & {
            margin-left: -15px;
            margin-right: 6px;
          }
        }
      }

      &:dir(rtl) {
        padding: 0 15px 0 0;

        trough {
          padding-right: 4px;
          background-position: -3px 0;
          border-bottom-left-radius: 0;
          border-top-left-radius: 0;
        }

        slider {
          &:hover, &:backdrop, &:disabled, &:backdrop:disabled, & {
            margin-right: -15px;
            margin-left: 6px;
          }
        }
      }
    }

    &.fine-tune {
      &.horizontal {
        &:dir(ltr), &:dir(rtl) { // specificity bump
          padding: 0 0 12px 0;

          trough {
            padding-bottom: 7px;
            background-position: 0 -6px;
          }

          slider {
            margin-bottom: -15px;
            margin-top: 6px;
          }
        }
      }

      &.vertical {
        &:dir(ltr) {
          padding: 0 0 0 12px;

          trough {
            padding-left: 7px;
            background-position: 6px 0;
          }

          slider {
            margin-left: -15px;
            margin-right: 6px;
          }
        }

        &:dir(rtl) {
          padding: 0 12px 0 0;

          trough {
            padding-right: 7px;
            background-position: -6px 0;
          }

          slider {
            margin-right: -15px;
            margin-left: 6px;
          }
        }
      }
    }
  }
}
