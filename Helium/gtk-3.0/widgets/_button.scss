// ***********
// * Buttons *
// ***********

@use 'shared' as *;
@use 'base' as *;
$button_color: $accent_bg_color;
$button_hover_color: state-color($button_color, $surface_fg_color, 1);
$button_active_color: state-color($button_color, $surface_fg_color, 2);
$button_checked_color: state-color($button_color, $surface_fg_color, 2);
$button_checked_hover_color: state-color($button_color, $surface_fg_color, 3);
$button_checked_active_color: state-color($button_color, $surface_fg_color, 2);
$opaque_button_default_bg: $accent_color;

// stuff for .needs-attention
$_dot_color: $accent_color;
@keyframes needs_attention {
  from {
    background-image: radial-gradient(
      farthest-side,
      $_dot_color 0%,
      transparent 0%
    );
  }

  to {
    background-image: radial-gradient(
      farthest-side,
      $_dot_color 95%,
      transparent
    );
  }
}

%button,
button {
  @at-root %button_basic, & {

    min-height: 24px;
    min-width: 16px;
    padding: 0;
    border: 1px solid;
    border-color: transparent; // Should be in _drawing.scss, but it breaks linked buttons
    border-radius: 999px;
    transition: $button_transition;
    font-weight: bold;
    outline-style: solid;
    outline-offset: -2px;
    outline-width: 2px;
    -gtk-outline-radius: $button-radius - 2;

    box-shadow: none;
    background: $button_color;
    color: $accent_fg_color;

    @include focus-ring();

    @at-root %button_basic_flat,
    &.flat {
      background: transparent;
      border-color: transparent;
      box-shadow: none;
      color: $window_fg_color;
      @include focus-ring();
      transition: $button_transition;

      &:hover {
        background: $button_hover_color;
        color: $accent_color;
      }

      &.keyboard-activating,
      &:active {
        background: $button_active_color;
        color: $accent_color;
      }

      &:checked {
        background: $button_checked_color;
        color: $accent_color;

        &:hover {
          background: $button_checked_hover_color;
        }

        &.keyboard-activating,
        &:active {
          background: $button_checked_active_color;
        }
      }

      &:disabled:not(:checked) {
        filter: opacity($strong_disabled_opacity);
      }
    }

    @at-root %opaque_button {
      box-shadow: none;
      border-radius: 999px;
      @include focus-ring($outer: true, $offset: 1px);
      transition: $button_transition;

      .osd &:focus {
        outline-color: $osd_focus_color;
      }

      &:hover {
        background-image: image(gtkalpha($window_fg_color, 0.1));
      }

      &.keyboard-activating,
      &:active {
        background-image: image(transparentize(black, 0.8));
      }

      &:checked {
        background-image: image(transparentize(black, 0.85));

        &:hover {
          background-image: image(transparentize(black, 0.95));
        }

        &.keyboard-activating,
        &:active {
          background-image: image(transparentize(black, 0.7));
        }
      }
    }

    &:hover {
      background: $button_hover_color;
      color: $accent_fg_color;
      -gtk-icon-effect: highlight;
    }

    &.keyboard-activating,
    &:active {
      background: $button_active_color;
      color: $accent_fg_color;
      transition-duration: 50ms;
    }

    &:checked {
      background: $button_checked_color;
      color: $accent_fg_color;

      &:hover {
        background: $button_checked_hover_color;
      }

      &.keyboard-activating,
      &:active {
        background: $button_checked_active_color;
      }
    }

    &:backdrop {
      &.flat, & {
        transition: $backdrop_transition;
        -gtk-icon-effect: none;
      }
    }

    &:disabled {
      background: gtkalpha($window_fg_color, 0.12);
      color: gtkalpha($window_fg_color, 0.38);
      border-color: transparent;
      box-shadow: none;

      label {
        filter: none;
      }

      &:active,
      &:checked {
        background: gtkalpha($window_fg_color, 0.16);
        color: gtkalpha($window_fg_color, 0.45);
      }
    }

    &.image-button {
      min-width: 24px;
      padding-left: $img_btn_pad;
      padding-right: $img_btn_pad;
    }

    &.text-button {
      padding-left: 10px;
      padding-right: 10px;
    }

    &.text-button.image-button {
      padding-left: 4px;
      padding-right: 4px;

      label {
        padding-left: 4px;
        padding-right: 4px;
      }
    }

    @at-root %button_basic_drop_active,
    &:drop(active) {
      color: $drop_target_color;
      border-color: transparent;
      box-shadow: inset 0 0 0 2px $drop_target_color;
    }
  }

  @at-root %button_selected, & {
    row:selected & {
      border-color: transparent;
      color: $accent_fg_color;
    }

    @at-root %button_selected_flat, &.flat {
      row:selected & {
        &:not(:active):not(:checked):not(:hover):not(disabled) {
          color: $accent_fg_color;
          background: $button_hover_color;
          border-color: transparent;
        }
      }
    }
  }


  // big standalone buttons like in Documents pager
  &.osd {
    min-width: 42px;
    min-height: 42px;
    border-radius: 999px;
    @include focus-ring($outer: true, $offset: 1px, $fc: $osd_focus_color);
    transition: $button_transition;

    color: $osd_fg_color;
    background: bg-color(-1);
    border: none;
    box-shadow: none;

    &:hover {
      color: white;
      background: gtkalpha(gtkmix(black, $window_fg_color, 0.85), 0.65);
    }

    &.keyboard-activating,
    &:active {
      color: white;
      background: gtkalpha(gtkmix(black, $window_fg_color, 0.75), 0.65);
    }

    &:checked {
      background: gtkalpha(gtkmix(black, $window_fg_color, 0.8), 0.65);

      &:hover {
        background: gtkalpha(gtkmix(black, $window_fg_color, 0.75), 0.65);
      }

      &.keyboard-activating,
      &:active {
        background: gtkalpha(gtkmix(black, $window_fg_color, 0.65), 0.65);
      }
    }

    &:disabled {
      filter: opacity($disabled_opacity);
    }

    &:drop(active) {
      @extend %button_basic_drop_active;
    }
  }

  //overlay / OSD style
  @at-root %osd_button,
  .osd & {
    color: $osd_fg_color;
    background: bg-color(-1);
    border-radius: 999px;
    border: none;
    box-shadow: none;
    @include focus-ring($outer: true, $offset: 1px, $fc: $osd_focus_color);

    &:hover {
      color: white;
      background: gtkalpha(gtkmix(black, $window_fg_color, 0.85), 0.65);
    }

    &.keyboard-activating,
    &:active {
      color: white;
      background: gtkalpha(gtkmix(black, $window_fg_color, 0.75), 0.65);
    }

    &:checked {
      background: gtkalpha(gtkmix(black, $window_fg_color, 0.8), 0.65);

      &:hover {
        background: gtkalpha(gtkmix(black, $window_fg_color, 0.75), 0.65);
      }

      &.keyboard-activating,
      &:active {
        background: gtkalpha(gtkmix(black, $window_fg_color, 0.65), 0.65);
      }
    }

    &:disabled {
      filter: opacity($disabled_opacity);
    }

    &:backdrop {
      color: $osd_fg_color;
      background: bg-color(-1);
    }

    &:drop(active) {
      @extend %button_basic_drop_active;
    }

    &.flat {
      background: transparent;
      box-shadow: none;
      text-shadow: 0 1px black;
      -gtk-icon-shadow: 0 1px black;

      &:hover {
        background: gtkalpha(gtkmix(black, $window_fg_color, 0.85), 0.65);
        color: white;
      }

      &:disabled {
        background: transparent;
        border-color: transparent;
        filter: opacity($disabled_opacity);
      }

      &:backdrop {
        background: transparent;
        color: $osd_fg_color;
      }

      &:active,
      &:checked {
        background: gtkalpha(gtkmix(black, $window_fg_color, 0.75), 0.65);
        color: white;
      }
    }
  }

  &.opaque {
    @extend %opaque_button;

    background: $opaque_button_default_bg;
    color: $window_fg_color;
  }

  &.destructive-action {
    @extend %opaque_button;

    color: $destructive_fg_color;

    &,
    &:checked {
      background: $destructive_color;
    }
  }

  &.suggested-action {
    @extend %opaque_button;

    color: $accent_fg_color;

    &,
    &:checked {
      background: $accent_color;
    }
  }

  .stack-switcher > & {
    // to position the needs attention dot, padding is added to the button
    // child, a label needs just lateral padding while an icon needs vertical
    // padding added too.

    outline-offset: -3px; // needs to be set or it gets overriden by GtkRadioButton outline-offset

    > label {
      padding-left: 6px;  // label padding
      padding-right: 6px; //
    }

    > image {
      padding-left: 6px;   // image padding
      padding-right: 6px;  //
      padding-top: 3px;    //
      padding-bottom: 3px; //
    }

    &.text-button {
      // compensate text-button paddings
      padding-left: 10px;
      padding-right: 10px;
    }

    &.image-button {
      // we want image buttons to have a 1:1 aspect ratio, so compensation
      // of the padding added to the GtkImage is needed
      padding-left: 2px;
      padding-right: 2px;
    }

    &.needs-attention {
      > label,
      > image { @extend %needs_attention; }

      &:active,
      &:checked {
        > label,
        > image {
          animation: none;
          background-image: none;
        }
      }
    }
  }

  // hide separators
  &.font,
  &.file { separator { background-color: transparent; }}

  &.font { > box > box > label { font-weight: bold; }}

  // inline-toolbar buttons
  .inline-toolbar & { @extend %linked; }

  .primary-toolbar & { -gtk-icon-shadow: none; } // tango icons don't need shadows

  .linked > & { @extend %linked; }

  .linked.vertical > & { @extend %linked_vertical; }

  @at-root %circular_button,
    &.circular {
    min-width: 42px;
    min-height: 42px;
    padding: 0;
    border-radius: 9999px;

    label {
      padding: 0;
    }
  }

  @at-root %pill_button,
    &.pill {
    padding: 10px 24px;
    border-radius: 9999px;
  }

  &.card {
    background: $card_bg_color;
    color: $card_fg_color;
    background-clip: padding-box;
    font-weight: inherit;
    padding: 0;

    transition: $button_transition;

    &:hover {
      background-image: image(gtkalpha($window_fg_color, 0.03));
      color: $accent_fg_color;
    }

    &.keyboard-activating,
    &:active {
      background-image: image(gtkalpha($window_fg_color, 0.08));
      color: $accent_fg_color;
    }

    &:checked {
      background: $card_bg_color;
      background-image: image($view_selected_color);
      color: $window_fg_color;

      &:hover {
        background-image: image($view_selected_hover_color);
        color: $accent_fg_color;
      }

      &.keyboard-activating,
      &:active {
        background-image: image($view_selected_active_color);
        color: $accent_fg_color;
      }

      &.has-open-popup {
        background-image: image($view_selected_hover_color);
        color: $accent_fg_color;
      }
    }

    &:drop(active) {
      color: $drop_target_color;
      box-shadow: inset 0 0 0 1px $drop_target_color;
    }
  }
}

%needs_attention {
  // the dot is drawn by using two radial gradient, the first one is the actual dot, the other
  // simulates the shadow labels and icons normally have in buttons.
  animation: needs_attention 150ms ease-in;

  background-image: radial-gradient(farthest-side, $accent_color 96%, transparent);
  background-size: 6px 6px;
  background-repeat: no-repeat;

  background-position: right 3px;

  &:dir(rtl) {
    background-position: left 3px;
  }
}


// all the following is for the +|- buttons on inline toolbars, that way
// should really be deprecated...
.inline-toolbar toolbutton > button {
  @extend %button_basic_flat;
}

// More inline toolbar buttons
toolbar.inline-toolbar toolbutton {
  > button.flat { @extend %linked_middle; }

  &:first-child > button.flat { @extend %linked_left; }

  &:last-child > button.flat { @extend %linked_right; }

  &:only-child > button.flat { @extend %linked_only_child; }
}

%linked_middle {
  border-left-color: $border_color;
  border-right-color: $border_color;
  border-right-style: none;
  border-radius: 0;
  -gtk-outline-radius: 0;
}

%linked_left {
  border-left-color: transparent;
  border-top-left-radius: $button_radius;
  border-bottom-left-radius: $button_radius;
  -gtk-outline-top-left-radius: $button_radius;
  -gtk-outline-bottom-left-radius: $button_radius;
  &:not(button):focus { border-left-color: entry_focus_border(); } // Fix for linked entries
}

%linked_right {
  border-right-color: transparent;
  border-right-style: solid;
  border-top-right-radius: $button_radius;
  border-bottom-right-radius: $button_radius;
  -gtk-outline-top-right-radius: $button_radius;
  -gtk-outline-bottom-right-radius: $button_radius;
  &:not(button):focus { border-right-color: entry_focus_border(); }
}

%linked_only_child {
  border-style: solid;
  border-radius: 999px;
  -gtk-outline-radius: $button_radius;
}

// .linked assumes Box, which reverses nodes in RTL, so 1st child is always left
%linked {
  border-left-color: $border_color;
  border-right-color: $border_color;
  @extend %linked_middle;

  &:first-child { @extend %linked_left; }
  &:last-child { @extend %linked_right; }

  &:only-child { @extend %linked_only_child; }
}

// Other widgets use widget child order, so 1st/last child are at text start/end
%linked_flippable {
  @extend %linked_middle;

  &:dir(ltr) {
    &:first-child { @extend %linked_left; }
    &:last-child { @extend %linked_right; }
  }

  &:dir(rtl) {
    &:first-child { @extend %linked_right; }
    &:last-child { @extend %linked_left; }
  }

  &:only-child { @extend %linked_only_child; }
}

%linked_vertical_middle {
  border-top-color: $border_color;
  border-bottom-color: $border_color;
  border-style: solid none none none;
  border-radius: 0;
  -gtk-outline-radius: 0;
}

%linked_vertical_top {
  border-top-color: transparent;
  border-top-left-radius: $button_radius;
  border-top-right-radius: $button_radius;
  -gtk-outline-top-left-radius: $button_radius;
  -gtk-outline-top-right-radius: $button_radius;
}

%linked_vertical_bottom {
  border-bottom-color: transparent;
  border-bottom-style: solid;
  border-bottom-left-radius: $button_radius;
  border-bottom-right-radius: $button_radius;
  -gtk-outline-bottom-left-radius: $button_radius;
  -gtk-outline-bottom-right-radius: $button_radius;
}

%linked_vertical_only_child {
  border-style: solid;
  border-radius: 999px;
  -gtk-outline-radius: $button_radius;
}

%linked_vertical {
  border-top-color: $border_color;
  border-bottom-color: $border_color;

  @extend %linked_vertical_middle;

  &:first-child { @extend %linked_vertical_top; }

  &:last-child { @extend %linked_vertical_bottom; }

  &:only-child { @extend %linked_vertical_only_child; }
}

%undecorated_button {
  background-color: transparent;
  background-image: none;
  border-color: transparent;
  box-shadow: inset 0 1px transparentize(white, 1),
              0 1px transparentize(white, 1);
  text-shadow: none;
  -gtk-icon-shadow: none;
}

button.color {
  padding: 4px;

  colorswatch:only-child {
    &, overlay { border-radius: 0; }

    @if $variant == 'light' {
      .osd & { box-shadow: none; }
    }
  }

  @if $variant == 'light' {
    .osd &, & {
      &:disabled,
      &:backdrop,
      &:active,
      &:checked { colorswatch:only-child { box-shadow: none; }}
    }
  }
}

// list buttons
list row button.image-button:not(.flat) {
  @extend %undecorated_button;
  //border: 1px solid gtkalpha($borders_color, .5);
  &:hover {
    background-color: $view_hover_color;
  }
  &:active {
    background-color: $view_active_color;
  }
  &:checked {
    background-color: $view_selected_color;
    &:hover { background-color: $view_selected_hover_color; }
    &:active { background-color: $view_selected_active_color; }
  }
}

// *********
// * Links *
// *********

%link,
*:link {
  color: $link_color;

  &:visited {
    color: $link_visited_color;

    *:selected & { color: gtkmix($accent_fg_color, $link_visited_color, 60%); }
  }

  &:hover {
    $_fg: gtkmix(white, $link_color, 10%);
    color: $_fg;

    *:selected & { color: gtkmix($accent_fg_color, $_fg, 90%); }
  }

  &:active {
    color: $link_color;

    *:selected & { color: gtkmix($accent_fg_color, $link_color, 80%); }
  }

  &:backdrop { &:backdrop:hover, &:backdrop:hover:selected, & { color: gtkalpha($link_color, 0.9); }}

  &:disabled, &:disabled:backdrop { color: gtkalpha(gtkmix(white,black,50%), 0.8); } //gtkalpha(desaturate($link_color, 100%), 0.8);

  @at-root %link_selected,
  &:selected,
  *:selected & { color: gtkmix($accent_fg_color, $link_color, 80%); }
}

button:link,
button:visited {
  @extend %undecorated_button;

  @extend %link;

  text-shadow: none;
  font-weight: 400;

  &:hover,
  &:active,
  &:checked {
    @extend %undecorated_button;

    text-shadow: none;
  }

  > label {
    @extend %link;

    text-decoration-line: underline;

  }
}

// *****************
// * Color Chooser *
// *****************
colorswatch {
  // This widget is made of two boxes one on top of the other, the lower box is colorswatch {} the other one
  // is colorswatch overlay {}, colorswatch has the programmatically set background, so most of the style is
  // applied to the overlay box.

  &:drop(active), & { border-style: none; } // FIXME: implement a proper drop(active) state

  $_colorswatch_radius: 5px;

  // base color corners rounding
  // to avoid the artifacts caused by rounded corner anti-aliasing the base color
  // sports a bigger radius.
  // nth-child is needed by the custom color strip.

  &.top {
    border-top-left-radius: $_colorswatch_radius + 0.5px;
    border-top-right-radius: $_colorswatch_radius + 0.5px;

    overlay {
      border-top-left-radius: $_colorswatch_radius;
      border-top-right-radius: $_colorswatch_radius;
    }
  }

  &.bottom {
    border-bottom-left-radius: $_colorswatch_radius + 0.5px;
    border-bottom-right-radius: $_colorswatch_radius + 0.5px;

    overlay {
      border-bottom-left-radius: $_colorswatch_radius;
      border-bottom-right-radius: $_colorswatch_radius;
    }
  }

  &.left,
  &:first-child:not(.top) {
    border-top-left-radius: $_colorswatch_radius + 0.5px;
    border-bottom-left-radius: $_colorswatch_radius + 0.5px;

    overlay {
      border-top-left-radius: $_colorswatch_radius;
      border-bottom-left-radius: $_colorswatch_radius;
    }
  }

  &.right,
  &:last-child:not(.bottom) {
    border-top-right-radius: $_colorswatch_radius + 0.5px;
    border-bottom-right-radius: $_colorswatch_radius + 0.5px;

    overlay {
      border-top-right-radius: $_colorswatch_radius;
      border-bottom-right-radius: $_colorswatch_radius;
    }
  }

  &.dark {
    outline-color: transparentize(white, 0.4);

    overlay {
      color: white;

      &:hover { border-color: if($variant == 'light', transparentize(black, 0.2), $borders_color); }
    }
  }

  &.light {
    outline-color: transparentize(black, 0.4);

    overlay {
      color: black;

      &:hover { border-color: if($variant == 'light', transparentize(black, 0.5), $borders_color); }
    }
  }

  &:drop(active) {
    box-shadow: none;

    &.light overlay {
      border-color: $drop_target_color;
      box-shadow: inset 0 0 0 2px if($variant == 'light', gtkshade($drop_target_color, 0.93), $borders_color),
                  inset 0 0 0 1px $drop_target_color;
    }

    &.dark overlay {
      border-color: $drop_target_color;
      box-shadow: inset 0 0 0 2px if($variant == 'light', transparentize(black, 0.7), $borders_color),
                  inset 0 0 0 1px $drop_target_color;
    }
  }

  overlay {
    border: 1px solid if($variant == 'light', transparentize(black, 0.7), $borders_color);

    &:hover {
      box-shadow: inset 0 1px transparentize(white, 0.6),
                  inset 0 -1px transparentize(black, 0.8);
    }
  }

  &#add-color-button {
    border-radius: $_colorswatch_radius $_colorswatch_radius 0 0;

    &:only-child { border-radius: $_colorswatch_radius; }

    overlay {
      background: $button_color;
      color: $accent_fg_color;
      border-radius: $_colorswatch_radius;
      transition: $button_transition;

      &:hover {
        background: $button_hover_color;
      }

      &:active {
        background: $button_active_color;
      }
    }
  }

  &:disabled {
    opacity: $disabled_opacity;

    overlay {
      border-color: transparentize(black, 0.4);
      box-shadow: none;
    }
  }

  row:selected & { box-shadow: 0 0 0 2px $accent_fg_color; }

  &#editor-color-sample {
    border-radius: 4px;

    overlay { border-radius: 4.5px; }
  }
}

// colorscale popup
colorchooser .popover.osd { border-radius: 5px; }