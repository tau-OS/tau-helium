@function gtkalpha($c,$a) {
  @return unquote("alpha(#{$c},#{$a})");
}

@function gtkmix($c1,$c2,$r) {
  @return unquote("mix(#{$c1},#{$c2},#{$r})");
}

@function gtkshade($c,$s) {
  @return unquote("shade(#{$c},#{$s})");
}

@function gtkcolor($c) {
  @return unquote("@#{$c}");
}

@function bg-color($level) {
  // Inverted for OSD & Toasts
  @if $level == -1 {
      @return image($osd_bg_color);
  // Views
  } @else if $level == 0 {
      @return image($view_bg_color);
  // Elevation 1
  } @else if $level == 1 {
      @return linear-gradient(0deg, gtkalpha($accent_bg_color, 0.05), gtkalpha($accent_bg_color, 0.05)), image($view_bg_color);
  // Elevation 2
  } @else if $level == 2 {
      @return linear-gradient(0deg, gtkalpha($accent_bg_color, 0.08), gtkalpha($accent_bg_color, 0.08)), image($view_bg_color);
  // Elevation 3
  } @else if $level == 3 {
      @return linear-gradient(0deg, gtkalpha($accent_bg_color, 0.11), gtkalpha($accent_bg_color, 0.11)), image($view_bg_color);
  // Elevation 4
  } @else if $level == 4 {
      @return linear-gradient(0deg, gtkalpha($accent_bg_color, 0.14), gtkalpha($accent_bg_color, 0.14)), image($view_bg_color);
  // Elevation 5
  } @else if $level == 5 {
      @return linear-gradient(0deg, gtkalpha($accent_bg_color, 0.15), gtkalpha($accent_bg_color, 0.15)), image($view_bg_color);
  } @else {
      @return image($view_bg_color);
  }
}

@function state-color($base_color, $level) {
  // Base
  @if $level == 0 {
      @return image($base_color);
  // Hover
  } @else if $level == 1 {
      @return linear-gradient(0deg, gtkalpha($view_fg_color, 0.08), gtkalpha($view_fg_color, 0.08)), image($base_color);
  // Active/Checked
  } @else if $level == 2 {
      @return linear-gradient(0deg, gtkalpha($view_fg_color, 0.12), gtkalpha($view_fg_color, 0.12)), image($base_color);
  // Drag
  } @else if $level == 3 {
      @return linear-gradient(0deg, gtkalpha($view_fg_color, 0.16), gtkalpha($view_fg_color, 0.16)), image($base_color);
  } @else {
      @return image($base_color);
  }
}

@function shadow($level) {
  // Sunken controls
  @if $level == -1 {
    @return
        0 -1px 0 0 rgb(0, 0, 0, 0.25),
        0  1px 0 1px rgb(255, 255, 255, 0.25);
  // Outline border
  } @else if $level == 0 {
      @return
          0 0 0 0 rgb(0, 0, 0, 0.2),
          0 0 0 0 rgb(0, 0, 0, 0.14),
          0 0 0 0 rgb(0, 0, 0, 0.12);
  // Elevation 1
  } @else if $level == 1 {
      @return
          0 3px 1px -2px rgb(0, 0, 0, 0.2),
          0 2px 2px 0 rgb(0, 0, 0, 0.14),
          0 1px 5px 0 rgb(0, 0, 0, 0.12);
  // Elevation 2
  } @else if $level == 2 {
      @return
          0 2px 4px -1px rgb(0, 0, 0, 0.2),
          0 4px 5px 0 rgb(0, 0, 0, 0.14),
          0 1px 10px 0 rgb(0, 0, 0, 0.12);
  // Elevation 3
  } @else if $level == 3 {
      @return
          0 5px 5px -3px rgb(0, 0, 0, 0.2),
          0 8px 10px 1px rgb(0, 0, 0, 0.14),
          0 3px 14px 2px rgb(0, 0, 0, 0.12);
  // Elevation 4
  } @else if $level == 4 {
      @return
          0 5px 5px -3px rgb(0, 0, 0, 0.2),
          0 8px 10px 1px rgb(0, 0, 0, 0.14),
          0 3px 14px 2px rgb(0, 0, 0, 0.12);
  // Elevation 5
  } @else if $level == 5 {
      @return
          0 8px 10px -6px rgb(0, 0, 0, 0.2),
          0 16px 24px 2px rgb(0, 0, 0, 0.14),
          0 6px 30px 5px rgb(0, 0, 0, 0.12);
  }
}

@function px-to-rem($pixels, $text-size: 10pt) {
    @if (unitless($pixels)) {
        $pixels: $pixels * 1px;
    }

    @if (unitless($text-size)) {
        $text-size: $text-size * 1px;
    }

    @if ($pixels > 0) {
        // Workaround GTK clamping instead of rounding up
        @return (calc($pixels / $text-size) * 1rem) + 0.000000001rem;
    } @else {
        @return (calc($pixels / $text-size) * 1rem) - 0.000000001rem;
    }
}
